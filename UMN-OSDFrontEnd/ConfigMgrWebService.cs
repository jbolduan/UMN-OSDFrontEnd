//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.6.1055.0.
// 


/// <remarks/>

namespace UMN_OSDFrontEnd {
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Web.Services.WebServiceBindingAttribute( Name = "ConfigMgr WebServiceSoap", Namespace = "http://www.scconfigmgr.com" )]
    public partial class ConfigMgrWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {

        private System.Threading.SendOrPostCallback GetCWVersionOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMPrimaryUserByDeviceNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMPrimaryUserByDeviceResourceIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMPrimaryDeviceByUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeployedApplicationsByUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeployedApplicationsByDeviceOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMHiddenTaskSequenceDeploymentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeviceResourceIDByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeviceResourceIDByMACAddressOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMUnknownComputerResourceIDByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeviceNameByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeviceUUIDByNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMBootImageSourceVersionOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDiscoveredUsersOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMUniqueUserNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMUserOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCMComputerByMacAddressOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCMComputerByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback AddCMComputerToCollectionOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDeviceCollectionsOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateCMCollectionMembershipOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMDriverPackageByModelOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMPackageOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMUnknownDeviceByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMOSImageVersionForTaskSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMOSImageArchitectureForTaskSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMOSImageForTaskSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMUnknownDeviceByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMDeviceByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMDeviceByNameOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMDeviceByResourceIDOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMDeviceFromCollectionOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMLastPXEAdvertisementForDeviceOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMLastPXEAdvertisementForCollectionOperationCompleted;

        private System.Threading.SendOrPostCallback AddCMComputerAssociationForUserOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMComputerAssociationOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMApplicationDeploymentsByCollectionIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMCollectionsForDeviceByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMCollectionsForDeviceByNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMCollectionsForDeviceByResourceIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMApplicationByCategoryOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMApplicationOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveCMPrimaryUserByDeviceResourceIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMFirstAvailableNameSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback GetCMTaskSequenceOperationCompleted;

        private System.Threading.SendOrPostCallback SetADOrganizationalUnitForComputerOperationCompleted;

        private System.Threading.SendOrPostCallback SetADComputerManagedByOperationCompleted;

        private System.Threading.SendOrPostCallback AddADComputerToGroupOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveADComputerFromGroupOperationCompleted;

        private System.Threading.SendOrPostCallback GetADGroupMembersOperationCompleted;

        private System.Threading.SendOrPostCallback GetADGroupsByUserOperationCompleted;

        private System.Threading.SendOrPostCallback SetADComputerDescriptionOperationCompleted;

        private System.Threading.SendOrPostCallback GetADComputerDescriptionOperationCompleted;

        private System.Threading.SendOrPostCallback GetADSiteNameByIPAddressOperationCompleted;

        private System.Threading.SendOrPostCallback GetADGroupMemberByUserOperationCompleted;

        private System.Threading.SendOrPostCallback GetADGroupMemberByComputerOperationCompleted;

        private System.Threading.SendOrPostCallback GetADComputerOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveADComputerOperationCompleted;

        private System.Threading.SendOrPostCallback GetADDomainOperationCompleted;

        private System.Threading.SendOrPostCallback GetADOrganizationalUnitsOperationCompleted;

        private System.Threading.SendOrPostCallback NewCWEventLogEntryOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTRolesOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerByAssetTagOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerByMacAddressOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerBySerialNumberOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTDetailedComputerRoleMembershipOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerRoleMembershipOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerNameByIdentityOperationCompleted;

        private System.Threading.SendOrPostCallback AddMDTRoleMemberByAssetTagOperationCompleted;

        private System.Threading.SendOrPostCallback AddMDTRoleMemberBySerialNumberOperationCompleted;

        private System.Threading.SendOrPostCallback AddMDTRoleMemberByMacAddressOperationCompleted;

        private System.Threading.SendOrPostCallback AddMDTRoleMemberByUUIDOperationCompleted;

        private System.Threading.SendOrPostCallback AddMDTRoleMemberOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveMDTComputerFromRolesOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveMDTComputerByMacAddressOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveMDTComputerBySerialNumberOperationCompleted;

        private System.Threading.SendOrPostCallback GetMDTComputerByNameOperationCompleted;

        /// <remarks/>
        public ConfigMgrWebService(string WebServiceUrl) {
            this.Url = WebServiceUrl;
        }

        /// <remarks/>
        public event GetCWVersionCompletedEventHandler GetCWVersionCompleted;

        /// <remarks/>
        public event GetCMPrimaryUserByDeviceNameCompletedEventHandler GetCMPrimaryUserByDeviceNameCompleted;

        /// <remarks/>
        public event GetCMPrimaryUserByDeviceResourceIdCompletedEventHandler GetCMPrimaryUserByDeviceResourceIdCompleted;

        /// <remarks/>
        public event GetCMPrimaryDeviceByUserCompletedEventHandler GetCMPrimaryDeviceByUserCompleted;

        /// <remarks/>
        public event GetCMDeployedApplicationsByUserCompletedEventHandler GetCMDeployedApplicationsByUserCompleted;

        /// <remarks/>
        public event GetCMDeployedApplicationsByDeviceCompletedEventHandler GetCMDeployedApplicationsByDeviceCompleted;

        /// <remarks/>
        public event GetCMHiddenTaskSequenceDeploymentsCompletedEventHandler GetCMHiddenTaskSequenceDeploymentsCompleted;

        /// <remarks/>
        public event GetCMDeviceResourceIDByUUIDCompletedEventHandler GetCMDeviceResourceIDByUUIDCompleted;

        /// <remarks/>
        public event GetCMDeviceResourceIDByMACAddressCompletedEventHandler GetCMDeviceResourceIDByMACAddressCompleted;

        /// <remarks/>
        public event GetCMUnknownComputerResourceIDByUUIDCompletedEventHandler GetCMUnknownComputerResourceIDByUUIDCompleted;

        /// <remarks/>
        public event GetCMDeviceNameByUUIDCompletedEventHandler GetCMDeviceNameByUUIDCompleted;

        /// <remarks/>
        public event GetCMDeviceUUIDByNameCompletedEventHandler GetCMDeviceUUIDByNameCompleted;

        /// <remarks/>
        public event GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventHandler GetCMHiddenTaskSequenceDeploymentsByResourceIdCompleted;

        /// <remarks/>
        public event GetCMBootImageSourceVersionCompletedEventHandler GetCMBootImageSourceVersionCompleted;

        /// <remarks/>
        public event GetCMDiscoveredUsersCompletedEventHandler GetCMDiscoveredUsersCompleted;

        /// <remarks/>
        public event GetCMUniqueUserNameCompletedEventHandler GetCMUniqueUserNameCompleted;

        /// <remarks/>
        public event GetCMUserCompletedEventHandler GetCMUserCompleted;

        /// <remarks/>
        public event ImportCMComputerByMacAddressCompletedEventHandler ImportCMComputerByMacAddressCompleted;

        /// <remarks/>
        public event ImportCMComputerByUUIDCompletedEventHandler ImportCMComputerByUUIDCompleted;

        /// <remarks/>
        public event AddCMComputerToCollectionCompletedEventHandler AddCMComputerToCollectionCompleted;

        /// <remarks/>
        public event GetCMDeviceCollectionsCompletedEventHandler GetCMDeviceCollectionsCompleted;

        /// <remarks/>
        public event UpdateCMCollectionMembershipCompletedEventHandler UpdateCMCollectionMembershipCompleted;

        /// <remarks/>
        public event GetCMDriverPackageByModelCompletedEventHandler GetCMDriverPackageByModelCompleted;

        /// <remarks/>
        public event GetCMPackageCompletedEventHandler GetCMPackageCompleted;

        /// <remarks/>
        public event GetCMUnknownDeviceByUUIDCompletedEventHandler GetCMUnknownDeviceByUUIDCompleted;

        /// <remarks/>
        public event GetCMOSImageVersionForTaskSequenceCompletedEventHandler GetCMOSImageVersionForTaskSequenceCompleted;

        /// <remarks/>
        public event GetCMOSImageArchitectureForTaskSequenceCompletedEventHandler GetCMOSImageArchitectureForTaskSequenceCompleted;

        /// <remarks/>
        public event GetCMOSImageForTaskSequenceCompletedEventHandler GetCMOSImageForTaskSequenceCompleted;

        /// <remarks/>
        public event RemoveCMUnknownDeviceByUUIDCompletedEventHandler RemoveCMUnknownDeviceByUUIDCompleted;

        /// <remarks/>
        public event RemoveCMDeviceByUUIDCompletedEventHandler RemoveCMDeviceByUUIDCompleted;

        /// <remarks/>
        public event RemoveCMDeviceByNameCompletedEventHandler RemoveCMDeviceByNameCompleted;

        /// <remarks/>
        public event RemoveCMDeviceByResourceIDCompletedEventHandler RemoveCMDeviceByResourceIDCompleted;

        /// <remarks/>
        public event RemoveCMDeviceFromCollectionCompletedEventHandler RemoveCMDeviceFromCollectionCompleted;

        /// <remarks/>
        public event RemoveCMLastPXEAdvertisementForDeviceCompletedEventHandler RemoveCMLastPXEAdvertisementForDeviceCompleted;

        /// <remarks/>
        public event RemoveCMLastPXEAdvertisementForCollectionCompletedEventHandler RemoveCMLastPXEAdvertisementForCollectionCompleted;

        /// <remarks/>
        public event AddCMComputerAssociationForUserCompletedEventHandler AddCMComputerAssociationForUserCompleted;

        /// <remarks/>
        public event RemoveCMComputerAssociationCompletedEventHandler RemoveCMComputerAssociationCompleted;

        /// <remarks/>
        public event GetCMApplicationDeploymentsByCollectionIDCompletedEventHandler GetCMApplicationDeploymentsByCollectionIDCompleted;

        /// <remarks/>
        public event GetCMCollectionsForDeviceByUUIDCompletedEventHandler GetCMCollectionsForDeviceByUUIDCompleted;

        /// <remarks/>
        public event GetCMCollectionsForDeviceByNameCompletedEventHandler GetCMCollectionsForDeviceByNameCompleted;

        /// <remarks/>
        public event GetCMCollectionsForDeviceByResourceIDCompletedEventHandler GetCMCollectionsForDeviceByResourceIDCompleted;

        /// <remarks/>
        public event GetCMApplicationByCategoryCompletedEventHandler GetCMApplicationByCategoryCompleted;

        /// <remarks/>
        public event GetCMApplicationCompletedEventHandler GetCMApplicationCompleted;

        /// <remarks/>
        public event RemoveCMPrimaryUserByDeviceResourceIdCompletedEventHandler RemoveCMPrimaryUserByDeviceResourceIdCompleted;

        /// <remarks/>
        public event GetCMFirstAvailableNameSequenceCompletedEventHandler GetCMFirstAvailableNameSequenceCompleted;

        /// <remarks/>
        public event GetCMTaskSequenceCompletedEventHandler GetCMTaskSequenceCompleted;

        /// <remarks/>
        public event SetADOrganizationalUnitForComputerCompletedEventHandler SetADOrganizationalUnitForComputerCompleted;

        /// <remarks/>
        public event SetADComputerManagedByCompletedEventHandler SetADComputerManagedByCompleted;

        /// <remarks/>
        public event AddADComputerToGroupCompletedEventHandler AddADComputerToGroupCompleted;

        /// <remarks/>
        public event RemoveADComputerFromGroupCompletedEventHandler RemoveADComputerFromGroupCompleted;

        /// <remarks/>
        public event GetADGroupMembersCompletedEventHandler GetADGroupMembersCompleted;

        /// <remarks/>
        public event GetADGroupsByUserCompletedEventHandler GetADGroupsByUserCompleted;

        /// <remarks/>
        public event SetADComputerDescriptionCompletedEventHandler SetADComputerDescriptionCompleted;

        /// <remarks/>
        public event GetADComputerDescriptionCompletedEventHandler GetADComputerDescriptionCompleted;

        /// <remarks/>
        public event GetADSiteNameByIPAddressCompletedEventHandler GetADSiteNameByIPAddressCompleted;

        /// <remarks/>
        public event GetADGroupMemberByUserCompletedEventHandler GetADGroupMemberByUserCompleted;

        /// <remarks/>
        public event GetADGroupMemberByComputerCompletedEventHandler GetADGroupMemberByComputerCompleted;

        /// <remarks/>
        public event GetADComputerCompletedEventHandler GetADComputerCompleted;

        /// <remarks/>
        public event RemoveADComputerCompletedEventHandler RemoveADComputerCompleted;

        /// <remarks/>
        public event GetADDomainCompletedEventHandler GetADDomainCompleted;

        /// <remarks/>
        public event GetADOrganizationalUnitsCompletedEventHandler GetADOrganizationalUnitsCompleted;

        /// <remarks/>
        public event NewCWEventLogEntryCompletedEventHandler NewCWEventLogEntryCompleted;

        /// <remarks/>
        public event GetMDTRolesCompletedEventHandler GetMDTRolesCompleted;

        /// <remarks/>
        public event GetMDTComputerByAssetTagCompletedEventHandler GetMDTComputerByAssetTagCompleted;

        /// <remarks/>
        public event GetMDTComputerByMacAddressCompletedEventHandler GetMDTComputerByMacAddressCompleted;

        /// <remarks/>
        public event GetMDTComputerBySerialNumberCompletedEventHandler GetMDTComputerBySerialNumberCompleted;

        /// <remarks/>
        public event GetMDTComputerByUUIDCompletedEventHandler GetMDTComputerByUUIDCompleted;

        /// <remarks/>
        public event GetMDTDetailedComputerRoleMembershipCompletedEventHandler GetMDTDetailedComputerRoleMembershipCompleted;

        /// <remarks/>
        public event GetMDTComputerRoleMembershipCompletedEventHandler GetMDTComputerRoleMembershipCompleted;

        /// <remarks/>
        public event GetMDTComputerNameByIdentityCompletedEventHandler GetMDTComputerNameByIdentityCompleted;

        /// <remarks/>
        public event AddMDTRoleMemberByAssetTagCompletedEventHandler AddMDTRoleMemberByAssetTagCompleted;

        /// <remarks/>
        public event AddMDTRoleMemberBySerialNumberCompletedEventHandler AddMDTRoleMemberBySerialNumberCompleted;

        /// <remarks/>
        public event AddMDTRoleMemberByMacAddressCompletedEventHandler AddMDTRoleMemberByMacAddressCompleted;

        /// <remarks/>
        public event AddMDTRoleMemberByUUIDCompletedEventHandler AddMDTRoleMemberByUUIDCompleted;

        /// <remarks/>
        public event AddMDTRoleMemberCompletedEventHandler AddMDTRoleMemberCompleted;

        /// <remarks/>
        public event RemoveMDTComputerFromRolesCompletedEventHandler RemoveMDTComputerFromRolesCompleted;

        /// <remarks/>
        public event RemoveMDTComputerByMacAddressCompletedEventHandler RemoveMDTComputerByMacAddressCompleted;

        /// <remarks/>
        public event RemoveMDTComputerBySerialNumberCompletedEventHandler RemoveMDTComputerBySerialNumberCompleted;

        /// <remarks/>
        public event GetMDTComputerByNameCompletedEventHandler GetMDTComputerByNameCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCWVersion", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCWVersion() {
            object[] results = this.Invoke( "GetCWVersion", new object[0] );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCWVersion( System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCWVersion", new object[0], callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCWVersion( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCWVersionAsync() {
            this.GetCWVersionAsync( null );
        }

        /// <remarks/>
        public void GetCWVersionAsync( object userState ) {
            if( ( this.GetCWVersionOperationCompleted == null ) ) {
                this.GetCWVersionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCWVersionOperationCompleted );
            }
            this.InvokeAsync( "GetCWVersion", new object[0], this.GetCWVersionOperationCompleted, userState );
        }

        private void OnGetCWVersionOperationCompleted( object arg ) {
            if( ( this.GetCWVersionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCWVersionCompleted( this, new GetCWVersionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMPrimaryUserByDeviceName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMPrimaryUserByDeviceName( string secret, string deviceName ) {
            object[] results = this.Invoke( "GetCMPrimaryUserByDeviceName", new object[] {
                    secret,
                    deviceName} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMPrimaryUserByDeviceName( string secret, string deviceName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMPrimaryUserByDeviceName", new object[] {
                    secret,
                    deviceName}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMPrimaryUserByDeviceName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMPrimaryUserByDeviceNameAsync( string secret, string deviceName ) {
            this.GetCMPrimaryUserByDeviceNameAsync( secret, deviceName, null );
        }

        /// <remarks/>
        public void GetCMPrimaryUserByDeviceNameAsync( string secret, string deviceName, object userState ) {
            if( ( this.GetCMPrimaryUserByDeviceNameOperationCompleted == null ) ) {
                this.GetCMPrimaryUserByDeviceNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMPrimaryUserByDeviceNameOperationCompleted );
            }
            this.InvokeAsync( "GetCMPrimaryUserByDeviceName", new object[] {
                    secret,
                    deviceName}, this.GetCMPrimaryUserByDeviceNameOperationCompleted, userState );
        }

        private void OnGetCMPrimaryUserByDeviceNameOperationCompleted( object arg ) {
            if( ( this.GetCMPrimaryUserByDeviceNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMPrimaryUserByDeviceNameCompleted( this, new GetCMPrimaryUserByDeviceNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMPrimaryUserByDeviceResourceId", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMUserDeviceRelation[] GetCMPrimaryUserByDeviceResourceId( string secret, string resourceId ) {
            object[] results = this.Invoke( "GetCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId} );
            return ( (CMUserDeviceRelation[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMPrimaryUserByDeviceResourceId( string secret, string resourceId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId}, callback, asyncState );
        }

        /// <remarks/>
        public CMUserDeviceRelation[] EndGetCMPrimaryUserByDeviceResourceId( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMUserDeviceRelation[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMPrimaryUserByDeviceResourceIdAsync( string secret, string resourceId ) {
            this.GetCMPrimaryUserByDeviceResourceIdAsync( secret, resourceId, null );
        }

        /// <remarks/>
        public void GetCMPrimaryUserByDeviceResourceIdAsync( string secret, string resourceId, object userState ) {
            if( ( this.GetCMPrimaryUserByDeviceResourceIdOperationCompleted == null ) ) {
                this.GetCMPrimaryUserByDeviceResourceIdOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMPrimaryUserByDeviceResourceIdOperationCompleted );
            }
            this.InvokeAsync( "GetCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId}, this.GetCMPrimaryUserByDeviceResourceIdOperationCompleted, userState );
        }

        private void OnGetCMPrimaryUserByDeviceResourceIdOperationCompleted( object arg ) {
            if( ( this.GetCMPrimaryUserByDeviceResourceIdCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMPrimaryUserByDeviceResourceIdCompleted( this, new GetCMPrimaryUserByDeviceResourceIdCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMPrimaryDeviceByUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMPrimaryDeviceByUser( string secret, string userName ) {
            object[] results = this.Invoke( "GetCMPrimaryDeviceByUser", new object[] {
                    secret,
                    userName} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMPrimaryDeviceByUser( string secret, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMPrimaryDeviceByUser", new object[] {
                    secret,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMPrimaryDeviceByUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMPrimaryDeviceByUserAsync( string secret, string userName ) {
            this.GetCMPrimaryDeviceByUserAsync( secret, userName, null );
        }

        /// <remarks/>
        public void GetCMPrimaryDeviceByUserAsync( string secret, string userName, object userState ) {
            if( ( this.GetCMPrimaryDeviceByUserOperationCompleted == null ) ) {
                this.GetCMPrimaryDeviceByUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMPrimaryDeviceByUserOperationCompleted );
            }
            this.InvokeAsync( "GetCMPrimaryDeviceByUser", new object[] {
                    secret,
                    userName}, this.GetCMPrimaryDeviceByUserOperationCompleted, userState );
        }

        private void OnGetCMPrimaryDeviceByUserOperationCompleted( object arg ) {
            if( ( this.GetCMPrimaryDeviceByUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMPrimaryDeviceByUserCompleted( this, new GetCMPrimaryDeviceByUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeployedApplicationsByUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMApplication[] GetCMDeployedApplicationsByUser( string secret, string userName ) {
            object[] results = this.Invoke( "GetCMDeployedApplicationsByUser", new object[] {
                    secret,
                    userName} );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeployedApplicationsByUser( string secret, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeployedApplicationsByUser", new object[] {
                    secret,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public CMApplication[] EndGetCMDeployedApplicationsByUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeployedApplicationsByUserAsync( string secret, string userName ) {
            this.GetCMDeployedApplicationsByUserAsync( secret, userName, null );
        }

        /// <remarks/>
        public void GetCMDeployedApplicationsByUserAsync( string secret, string userName, object userState ) {
            if( ( this.GetCMDeployedApplicationsByUserOperationCompleted == null ) ) {
                this.GetCMDeployedApplicationsByUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeployedApplicationsByUserOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeployedApplicationsByUser", new object[] {
                    secret,
                    userName}, this.GetCMDeployedApplicationsByUserOperationCompleted, userState );
        }

        private void OnGetCMDeployedApplicationsByUserOperationCompleted( object arg ) {
            if( ( this.GetCMDeployedApplicationsByUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeployedApplicationsByUserCompleted( this, new GetCMDeployedApplicationsByUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeployedApplicationsByDevice", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMDeployedApplicationsByDevice( string secret, string deviceName ) {
            object[] results = this.Invoke( "GetCMDeployedApplicationsByDevice", new object[] {
                    secret,
                    deviceName} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeployedApplicationsByDevice( string secret, string deviceName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeployedApplicationsByDevice", new object[] {
                    secret,
                    deviceName}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMDeployedApplicationsByDevice( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeployedApplicationsByDeviceAsync( string secret, string deviceName ) {
            this.GetCMDeployedApplicationsByDeviceAsync( secret, deviceName, null );
        }

        /// <remarks/>
        public void GetCMDeployedApplicationsByDeviceAsync( string secret, string deviceName, object userState ) {
            if( ( this.GetCMDeployedApplicationsByDeviceOperationCompleted == null ) ) {
                this.GetCMDeployedApplicationsByDeviceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeployedApplicationsByDeviceOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeployedApplicationsByDevice", new object[] {
                    secret,
                    deviceName}, this.GetCMDeployedApplicationsByDeviceOperationCompleted, userState );
        }

        private void OnGetCMDeployedApplicationsByDeviceOperationCompleted( object arg ) {
            if( ( this.GetCMDeployedApplicationsByDeviceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeployedApplicationsByDeviceCompleted( this, new GetCMDeployedApplicationsByDeviceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMHiddenTaskSequenceDeployments", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMTaskSequence[] GetCMHiddenTaskSequenceDeployments( string secret ) {
            object[] results = this.Invoke( "GetCMHiddenTaskSequenceDeployments", new object[] {
                    secret} );
            return ( (CMTaskSequence[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMHiddenTaskSequenceDeployments( string secret, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMHiddenTaskSequenceDeployments", new object[] {
                    secret}, callback, asyncState );
        }

        /// <remarks/>
        public CMTaskSequence[] EndGetCMHiddenTaskSequenceDeployments( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMTaskSequence[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMHiddenTaskSequenceDeploymentsAsync( string secret ) {
            this.GetCMHiddenTaskSequenceDeploymentsAsync( secret, null );
        }

        /// <remarks/>
        public void GetCMHiddenTaskSequenceDeploymentsAsync( string secret, object userState ) {
            if( ( this.GetCMHiddenTaskSequenceDeploymentsOperationCompleted == null ) ) {
                this.GetCMHiddenTaskSequenceDeploymentsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMHiddenTaskSequenceDeploymentsOperationCompleted );
            }
            this.InvokeAsync( "GetCMHiddenTaskSequenceDeployments", new object[] {
                    secret}, this.GetCMHiddenTaskSequenceDeploymentsOperationCompleted, userState );
        }

        private void OnGetCMHiddenTaskSequenceDeploymentsOperationCompleted( object arg ) {
            if( ( this.GetCMHiddenTaskSequenceDeploymentsCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMHiddenTaskSequenceDeploymentsCompleted( this, new GetCMHiddenTaskSequenceDeploymentsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeviceResourceIDByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMDeviceResourceIDByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetCMDeviceResourceIDByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeviceResourceIDByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeviceResourceIDByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMDeviceResourceIDByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeviceResourceIDByUUIDAsync( string secret, string uuid ) {
            this.GetCMDeviceResourceIDByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetCMDeviceResourceIDByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetCMDeviceResourceIDByUUIDOperationCompleted == null ) ) {
                this.GetCMDeviceResourceIDByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeviceResourceIDByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeviceResourceIDByUUID", new object[] {
                    secret,
                    uuid}, this.GetCMDeviceResourceIDByUUIDOperationCompleted, userState );
        }

        private void OnGetCMDeviceResourceIDByUUIDOperationCompleted( object arg ) {
            if( ( this.GetCMDeviceResourceIDByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeviceResourceIDByUUIDCompleted( this, new GetCMDeviceResourceIDByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeviceResourceIDByMACAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMDeviceResourceIDByMACAddress( string secret, string macAddress ) {
            object[] results = this.Invoke( "GetCMDeviceResourceIDByMACAddress", new object[] {
                    secret,
                    macAddress} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeviceResourceIDByMACAddress( string secret, string macAddress, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeviceResourceIDByMACAddress", new object[] {
                    secret,
                    macAddress}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMDeviceResourceIDByMACAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeviceResourceIDByMACAddressAsync( string secret, string macAddress ) {
            this.GetCMDeviceResourceIDByMACAddressAsync( secret, macAddress, null );
        }

        /// <remarks/>
        public void GetCMDeviceResourceIDByMACAddressAsync( string secret, string macAddress, object userState ) {
            if( ( this.GetCMDeviceResourceIDByMACAddressOperationCompleted == null ) ) {
                this.GetCMDeviceResourceIDByMACAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeviceResourceIDByMACAddressOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeviceResourceIDByMACAddress", new object[] {
                    secret,
                    macAddress}, this.GetCMDeviceResourceIDByMACAddressOperationCompleted, userState );
        }

        private void OnGetCMDeviceResourceIDByMACAddressOperationCompleted( object arg ) {
            if( ( this.GetCMDeviceResourceIDByMACAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeviceResourceIDByMACAddressCompleted( this, new GetCMDeviceResourceIDByMACAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMUnknownComputerResourceIDByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMUnknownComputerResourceIDByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetCMUnknownComputerResourceIDByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMUnknownComputerResourceIDByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMUnknownComputerResourceIDByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMUnknownComputerResourceIDByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMUnknownComputerResourceIDByUUIDAsync( string secret, string uuid ) {
            this.GetCMUnknownComputerResourceIDByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetCMUnknownComputerResourceIDByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetCMUnknownComputerResourceIDByUUIDOperationCompleted == null ) ) {
                this.GetCMUnknownComputerResourceIDByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMUnknownComputerResourceIDByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMUnknownComputerResourceIDByUUID", new object[] {
                    secret,
                    uuid}, this.GetCMUnknownComputerResourceIDByUUIDOperationCompleted, userState );
        }

        private void OnGetCMUnknownComputerResourceIDByUUIDOperationCompleted( object arg ) {
            if( ( this.GetCMUnknownComputerResourceIDByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMUnknownComputerResourceIDByUUIDCompleted( this, new GetCMUnknownComputerResourceIDByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeviceNameByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMDeviceNameByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetCMDeviceNameByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeviceNameByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeviceNameByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMDeviceNameByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeviceNameByUUIDAsync( string secret, string uuid ) {
            this.GetCMDeviceNameByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetCMDeviceNameByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetCMDeviceNameByUUIDOperationCompleted == null ) ) {
                this.GetCMDeviceNameByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeviceNameByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeviceNameByUUID", new object[] {
                    secret,
                    uuid}, this.GetCMDeviceNameByUUIDOperationCompleted, userState );
        }

        private void OnGetCMDeviceNameByUUIDOperationCompleted( object arg ) {
            if( ( this.GetCMDeviceNameByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeviceNameByUUIDCompleted( this, new GetCMDeviceNameByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeviceUUIDByName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMDeviceUUIDByName( string secret, string computerName ) {
            object[] results = this.Invoke( "GetCMDeviceUUIDByName", new object[] {
                    secret,
                    computerName} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeviceUUIDByName( string secret, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeviceUUIDByName", new object[] {
                    secret,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMDeviceUUIDByName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeviceUUIDByNameAsync( string secret, string computerName ) {
            this.GetCMDeviceUUIDByNameAsync( secret, computerName, null );
        }

        /// <remarks/>
        public void GetCMDeviceUUIDByNameAsync( string secret, string computerName, object userState ) {
            if( ( this.GetCMDeviceUUIDByNameOperationCompleted == null ) ) {
                this.GetCMDeviceUUIDByNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeviceUUIDByNameOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeviceUUIDByName", new object[] {
                    secret,
                    computerName}, this.GetCMDeviceUUIDByNameOperationCompleted, userState );
        }

        private void OnGetCMDeviceUUIDByNameOperationCompleted( object arg ) {
            if( ( this.GetCMDeviceUUIDByNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeviceUUIDByNameCompleted( this, new GetCMDeviceUUIDByNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMHiddenTaskSequenceDeploymentsByResourceId", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMTaskSequence[] GetCMHiddenTaskSequenceDeploymentsByResourceId( string secret, string resourceId ) {
            object[] results = this.Invoke( "GetCMHiddenTaskSequenceDeploymentsByResourceId", new object[] {
                    secret,
                    resourceId} );
            return ( (CMTaskSequence[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMHiddenTaskSequenceDeploymentsByResourceId( string secret, string resourceId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMHiddenTaskSequenceDeploymentsByResourceId", new object[] {
                    secret,
                    resourceId}, callback, asyncState );
        }

        /// <remarks/>
        public CMTaskSequence[] EndGetCMHiddenTaskSequenceDeploymentsByResourceId( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMTaskSequence[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMHiddenTaskSequenceDeploymentsByResourceIdAsync( string secret, string resourceId ) {
            this.GetCMHiddenTaskSequenceDeploymentsByResourceIdAsync( secret, resourceId, null );
        }

        /// <remarks/>
        public void GetCMHiddenTaskSequenceDeploymentsByResourceIdAsync( string secret, string resourceId, object userState ) {
            if( ( this.GetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted == null ) ) {
                this.GetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted );
            }
            this.InvokeAsync( "GetCMHiddenTaskSequenceDeploymentsByResourceId", new object[] {
                    secret,
                    resourceId}, this.GetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted, userState );
        }

        private void OnGetCMHiddenTaskSequenceDeploymentsByResourceIdOperationCompleted( object arg ) {
            if( ( this.GetCMHiddenTaskSequenceDeploymentsByResourceIdCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMHiddenTaskSequenceDeploymentsByResourceIdCompleted( this, new GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMBootImageSourceVersion", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMBootImageSourceVersion( string secret, string packageId ) {
            object[] results = this.Invoke( "GetCMBootImageSourceVersion", new object[] {
                    secret,
                    packageId} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMBootImageSourceVersion( string secret, string packageId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMBootImageSourceVersion", new object[] {
                    secret,
                    packageId}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMBootImageSourceVersion( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMBootImageSourceVersionAsync( string secret, string packageId ) {
            this.GetCMBootImageSourceVersionAsync( secret, packageId, null );
        }

        /// <remarks/>
        public void GetCMBootImageSourceVersionAsync( string secret, string packageId, object userState ) {
            if( ( this.GetCMBootImageSourceVersionOperationCompleted == null ) ) {
                this.GetCMBootImageSourceVersionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMBootImageSourceVersionOperationCompleted );
            }
            this.InvokeAsync( "GetCMBootImageSourceVersion", new object[] {
                    secret,
                    packageId}, this.GetCMBootImageSourceVersionOperationCompleted, userState );
        }

        private void OnGetCMBootImageSourceVersionOperationCompleted( object arg ) {
            if( ( this.GetCMBootImageSourceVersionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMBootImageSourceVersionCompleted( this, new GetCMBootImageSourceVersionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDiscoveredUsers", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMUser[] GetCMDiscoveredUsers( string secret ) {
            object[] results = this.Invoke( "GetCMDiscoveredUsers", new object[] {
                    secret} );
            return ( (CMUser[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDiscoveredUsers( string secret, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDiscoveredUsers", new object[] {
                    secret}, callback, asyncState );
        }

        /// <remarks/>
        public CMUser[] EndGetCMDiscoveredUsers( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMUser[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDiscoveredUsersAsync( string secret ) {
            this.GetCMDiscoveredUsersAsync( secret, null );
        }

        /// <remarks/>
        public void GetCMDiscoveredUsersAsync( string secret, object userState ) {
            if( ( this.GetCMDiscoveredUsersOperationCompleted == null ) ) {
                this.GetCMDiscoveredUsersOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDiscoveredUsersOperationCompleted );
            }
            this.InvokeAsync( "GetCMDiscoveredUsers", new object[] {
                    secret}, this.GetCMDiscoveredUsersOperationCompleted, userState );
        }

        private void OnGetCMDiscoveredUsersOperationCompleted( object arg ) {
            if( ( this.GetCMDiscoveredUsersCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDiscoveredUsersCompleted( this, new GetCMDiscoveredUsersCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMUniqueUserName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMUniqueUserName( string secret, string userName ) {
            object[] results = this.Invoke( "GetCMUniqueUserName", new object[] {
                    secret,
                    userName} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMUniqueUserName( string secret, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMUniqueUserName", new object[] {
                    secret,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMUniqueUserName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMUniqueUserNameAsync( string secret, string userName ) {
            this.GetCMUniqueUserNameAsync( secret, userName, null );
        }

        /// <remarks/>
        public void GetCMUniqueUserNameAsync( string secret, string userName, object userState ) {
            if( ( this.GetCMUniqueUserNameOperationCompleted == null ) ) {
                this.GetCMUniqueUserNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMUniqueUserNameOperationCompleted );
            }
            this.InvokeAsync( "GetCMUniqueUserName", new object[] {
                    secret,
                    userName}, this.GetCMUniqueUserNameOperationCompleted, userState );
        }

        private void OnGetCMUniqueUserNameOperationCompleted( object arg ) {
            if( ( this.GetCMUniqueUserNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMUniqueUserNameCompleted( this, new GetCMUniqueUserNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMUser GetCMUser( string secret, string samAccountName ) {
            object[] results = this.Invoke( "GetCMUser", new object[] {
                    secret,
                    samAccountName} );
            return ( (CMUser)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMUser( string secret, string samAccountName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMUser", new object[] {
                    secret,
                    samAccountName}, callback, asyncState );
        }

        /// <remarks/>
        public CMUser EndGetCMUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMUser)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMUserAsync( string secret, string samAccountName ) {
            this.GetCMUserAsync( secret, samAccountName, null );
        }

        /// <remarks/>
        public void GetCMUserAsync( string secret, string samAccountName, object userState ) {
            if( ( this.GetCMUserOperationCompleted == null ) ) {
                this.GetCMUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMUserOperationCompleted );
            }
            this.InvokeAsync( "GetCMUser", new object[] {
                    secret,
                    samAccountName}, this.GetCMUserOperationCompleted, userState );
        }

        private void OnGetCMUserOperationCompleted( object arg ) {
            if( ( this.GetCMUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMUserCompleted( this, new GetCMUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/ImportCMComputerByMacAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string ImportCMComputerByMacAddress( string secret, string computerName, string macAddress ) {
            object[] results = this.Invoke( "ImportCMComputerByMacAddress", new object[] {
                    secret,
                    computerName,
                    macAddress} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCMComputerByMacAddress( string secret, string computerName, string macAddress, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "ImportCMComputerByMacAddress", new object[] {
                    secret,
                    computerName,
                    macAddress}, callback, asyncState );
        }

        /// <remarks/>
        public string EndImportCMComputerByMacAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void ImportCMComputerByMacAddressAsync( string secret, string computerName, string macAddress ) {
            this.ImportCMComputerByMacAddressAsync( secret, computerName, macAddress, null );
        }

        /// <remarks/>
        public void ImportCMComputerByMacAddressAsync( string secret, string computerName, string macAddress, object userState ) {
            if( ( this.ImportCMComputerByMacAddressOperationCompleted == null ) ) {
                this.ImportCMComputerByMacAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnImportCMComputerByMacAddressOperationCompleted );
            }
            this.InvokeAsync( "ImportCMComputerByMacAddress", new object[] {
                    secret,
                    computerName,
                    macAddress}, this.ImportCMComputerByMacAddressOperationCompleted, userState );
        }

        private void OnImportCMComputerByMacAddressOperationCompleted( object arg ) {
            if( ( this.ImportCMComputerByMacAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ImportCMComputerByMacAddressCompleted( this, new ImportCMComputerByMacAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/ImportCMComputerByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string ImportCMComputerByUUID( string secret, string computerName, string uuid ) {
            object[] results = this.Invoke( "ImportCMComputerByUUID", new object[] {
                    secret,
                    computerName,
                    uuid} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCMComputerByUUID( string secret, string computerName, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "ImportCMComputerByUUID", new object[] {
                    secret,
                    computerName,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string EndImportCMComputerByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void ImportCMComputerByUUIDAsync( string secret, string computerName, string uuid ) {
            this.ImportCMComputerByUUIDAsync( secret, computerName, uuid, null );
        }

        /// <remarks/>
        public void ImportCMComputerByUUIDAsync( string secret, string computerName, string uuid, object userState ) {
            if( ( this.ImportCMComputerByUUIDOperationCompleted == null ) ) {
                this.ImportCMComputerByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnImportCMComputerByUUIDOperationCompleted );
            }
            this.InvokeAsync( "ImportCMComputerByUUID", new object[] {
                    secret,
                    computerName,
                    uuid}, this.ImportCMComputerByUUIDOperationCompleted, userState );
        }

        private void OnImportCMComputerByUUIDOperationCompleted( object arg ) {
            if( ( this.ImportCMComputerByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ImportCMComputerByUUIDCompleted( this, new ImportCMComputerByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddCMComputerToCollection", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddCMComputerToCollection( string secret, string resourceName, string collectionId ) {
            object[] results = this.Invoke( "AddCMComputerToCollection", new object[] {
                    secret,
                    resourceName,
                    collectionId} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddCMComputerToCollection( string secret, string resourceName, string collectionId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddCMComputerToCollection", new object[] {
                    secret,
                    resourceName,
                    collectionId}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddCMComputerToCollection( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddCMComputerToCollectionAsync( string secret, string resourceName, string collectionId ) {
            this.AddCMComputerToCollectionAsync( secret, resourceName, collectionId, null );
        }

        /// <remarks/>
        public void AddCMComputerToCollectionAsync( string secret, string resourceName, string collectionId, object userState ) {
            if( ( this.AddCMComputerToCollectionOperationCompleted == null ) ) {
                this.AddCMComputerToCollectionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddCMComputerToCollectionOperationCompleted );
            }
            this.InvokeAsync( "AddCMComputerToCollection", new object[] {
                    secret,
                    resourceName,
                    collectionId}, this.AddCMComputerToCollectionOperationCompleted, userState );
        }

        private void OnAddCMComputerToCollectionOperationCompleted( object arg ) {
            if( ( this.AddCMComputerToCollectionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddCMComputerToCollectionCompleted( this, new AddCMComputerToCollectionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDeviceCollections", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMCollection[] GetCMDeviceCollections( string secret, string filter ) {
            object[] results = this.Invoke( "GetCMDeviceCollections", new object[] {
                    secret,
                    filter} );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDeviceCollections( string secret, string filter, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDeviceCollections", new object[] {
                    secret,
                    filter}, callback, asyncState );
        }

        /// <remarks/>
        public CMCollection[] EndGetCMDeviceCollections( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDeviceCollectionsAsync( string secret, string filter ) {
            this.GetCMDeviceCollectionsAsync( secret, filter, null );
        }

        /// <remarks/>
        public void GetCMDeviceCollectionsAsync( string secret, string filter, object userState ) {
            if( ( this.GetCMDeviceCollectionsOperationCompleted == null ) ) {
                this.GetCMDeviceCollectionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDeviceCollectionsOperationCompleted );
            }
            this.InvokeAsync( "GetCMDeviceCollections", new object[] {
                    secret,
                    filter}, this.GetCMDeviceCollectionsOperationCompleted, userState );
        }

        private void OnGetCMDeviceCollectionsOperationCompleted( object arg ) {
            if( ( this.GetCMDeviceCollectionsCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDeviceCollectionsCompleted( this, new GetCMDeviceCollectionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/UpdateCMCollectionMembership", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool UpdateCMCollectionMembership( string secret, string collectionId ) {
            object[] results = this.Invoke( "UpdateCMCollectionMembership", new object[] {
                    secret,
                    collectionId} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateCMCollectionMembership( string secret, string collectionId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "UpdateCMCollectionMembership", new object[] {
                    secret,
                    collectionId}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndUpdateCMCollectionMembership( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void UpdateCMCollectionMembershipAsync( string secret, string collectionId ) {
            this.UpdateCMCollectionMembershipAsync( secret, collectionId, null );
        }

        /// <remarks/>
        public void UpdateCMCollectionMembershipAsync( string secret, string collectionId, object userState ) {
            if( ( this.UpdateCMCollectionMembershipOperationCompleted == null ) ) {
                this.UpdateCMCollectionMembershipOperationCompleted = new System.Threading.SendOrPostCallback( this.OnUpdateCMCollectionMembershipOperationCompleted );
            }
            this.InvokeAsync( "UpdateCMCollectionMembership", new object[] {
                    secret,
                    collectionId}, this.UpdateCMCollectionMembershipOperationCompleted, userState );
        }

        private void OnUpdateCMCollectionMembershipOperationCompleted( object arg ) {
            if( ( this.UpdateCMCollectionMembershipCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.UpdateCMCollectionMembershipCompleted( this, new UpdateCMCollectionMembershipCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMDriverPackageByModel", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMDriverPackage[] GetCMDriverPackageByModel( string secret, string model ) {
            object[] results = this.Invoke( "GetCMDriverPackageByModel", new object[] {
                    secret,
                    model} );
            return ( (CMDriverPackage[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMDriverPackageByModel( string secret, string model, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMDriverPackageByModel", new object[] {
                    secret,
                    model}, callback, asyncState );
        }

        /// <remarks/>
        public CMDriverPackage[] EndGetCMDriverPackageByModel( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMDriverPackage[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMDriverPackageByModelAsync( string secret, string model ) {
            this.GetCMDriverPackageByModelAsync( secret, model, null );
        }

        /// <remarks/>
        public void GetCMDriverPackageByModelAsync( string secret, string model, object userState ) {
            if( ( this.GetCMDriverPackageByModelOperationCompleted == null ) ) {
                this.GetCMDriverPackageByModelOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMDriverPackageByModelOperationCompleted );
            }
            this.InvokeAsync( "GetCMDriverPackageByModel", new object[] {
                    secret,
                    model}, this.GetCMDriverPackageByModelOperationCompleted, userState );
        }

        private void OnGetCMDriverPackageByModelOperationCompleted( object arg ) {
            if( ( this.GetCMDriverPackageByModelCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMDriverPackageByModelCompleted( this, new GetCMDriverPackageByModelCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMPackage", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMPackage[] GetCMPackage( string secret, string filter ) {
            object[] results = this.Invoke( "GetCMPackage", new object[] {
                    secret,
                    filter} );
            return ( (CMPackage[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMPackage( string secret, string filter, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMPackage", new object[] {
                    secret,
                    filter}, callback, asyncState );
        }

        /// <remarks/>
        public CMPackage[] EndGetCMPackage( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMPackage[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMPackageAsync( string secret, string filter ) {
            this.GetCMPackageAsync( secret, filter, null );
        }

        /// <remarks/>
        public void GetCMPackageAsync( string secret, string filter, object userState ) {
            if( ( this.GetCMPackageOperationCompleted == null ) ) {
                this.GetCMPackageOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMPackageOperationCompleted );
            }
            this.InvokeAsync( "GetCMPackage", new object[] {
                    secret,
                    filter}, this.GetCMPackageOperationCompleted, userState );
        }

        private void OnGetCMPackageOperationCompleted( object arg ) {
            if( ( this.GetCMPackageCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMPackageCompleted( this, new GetCMPackageCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMUnknownDeviceByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMUnknownDeviceByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMUnknownDeviceByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMUnknownDeviceByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMUnknownDeviceByUUIDAsync( string secret, string uuid ) {
            this.GetCMUnknownDeviceByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetCMUnknownDeviceByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetCMUnknownDeviceByUUIDOperationCompleted == null ) ) {
                this.GetCMUnknownDeviceByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMUnknownDeviceByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid}, this.GetCMUnknownDeviceByUUIDOperationCompleted, userState );
        }

        private void OnGetCMUnknownDeviceByUUIDOperationCompleted( object arg ) {
            if( ( this.GetCMUnknownDeviceByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMUnknownDeviceByUUIDCompleted( this, new GetCMUnknownDeviceByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMOSImageVersionForTaskSequence", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMOSImageVersionForTaskSequence( string secret, string tsPackageId ) {
            object[] results = this.Invoke( "GetCMOSImageVersionForTaskSequence", new object[] {
                    secret,
                    tsPackageId} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMOSImageVersionForTaskSequence( string secret, string tsPackageId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMOSImageVersionForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMOSImageVersionForTaskSequence( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMOSImageVersionForTaskSequenceAsync( string secret, string tsPackageId ) {
            this.GetCMOSImageVersionForTaskSequenceAsync( secret, tsPackageId, null );
        }

        /// <remarks/>
        public void GetCMOSImageVersionForTaskSequenceAsync( string secret, string tsPackageId, object userState ) {
            if( ( this.GetCMOSImageVersionForTaskSequenceOperationCompleted == null ) ) {
                this.GetCMOSImageVersionForTaskSequenceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMOSImageVersionForTaskSequenceOperationCompleted );
            }
            this.InvokeAsync( "GetCMOSImageVersionForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, this.GetCMOSImageVersionForTaskSequenceOperationCompleted, userState );
        }

        private void OnGetCMOSImageVersionForTaskSequenceOperationCompleted( object arg ) {
            if( ( this.GetCMOSImageVersionForTaskSequenceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMOSImageVersionForTaskSequenceCompleted( this, new GetCMOSImageVersionForTaskSequenceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMOSImageArchitectureForTaskSequence", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMOSImageArchitectureForTaskSequence( string secret, string tsPackageId ) {
            object[] results = this.Invoke( "GetCMOSImageArchitectureForTaskSequence", new object[] {
                    secret,
                    tsPackageId} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMOSImageArchitectureForTaskSequence( string secret, string tsPackageId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMOSImageArchitectureForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMOSImageArchitectureForTaskSequence( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMOSImageArchitectureForTaskSequenceAsync( string secret, string tsPackageId ) {
            this.GetCMOSImageArchitectureForTaskSequenceAsync( secret, tsPackageId, null );
        }

        /// <remarks/>
        public void GetCMOSImageArchitectureForTaskSequenceAsync( string secret, string tsPackageId, object userState ) {
            if( ( this.GetCMOSImageArchitectureForTaskSequenceOperationCompleted == null ) ) {
                this.GetCMOSImageArchitectureForTaskSequenceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMOSImageArchitectureForTaskSequenceOperationCompleted );
            }
            this.InvokeAsync( "GetCMOSImageArchitectureForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, this.GetCMOSImageArchitectureForTaskSequenceOperationCompleted, userState );
        }

        private void OnGetCMOSImageArchitectureForTaskSequenceOperationCompleted( object arg ) {
            if( ( this.GetCMOSImageArchitectureForTaskSequenceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMOSImageArchitectureForTaskSequenceCompleted( this, new GetCMOSImageArchitectureForTaskSequenceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMOSImageForTaskSequence", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMOSImage[] GetCMOSImageForTaskSequence( string secret, string tsPackageId ) {
            object[] results = this.Invoke( "GetCMOSImageForTaskSequence", new object[] {
                    secret,
                    tsPackageId} );
            return ( (CMOSImage[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMOSImageForTaskSequence( string secret, string tsPackageId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMOSImageForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, callback, asyncState );
        }

        /// <remarks/>
        public CMOSImage[] EndGetCMOSImageForTaskSequence( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMOSImage[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMOSImageForTaskSequenceAsync( string secret, string tsPackageId ) {
            this.GetCMOSImageForTaskSequenceAsync( secret, tsPackageId, null );
        }

        /// <remarks/>
        public void GetCMOSImageForTaskSequenceAsync( string secret, string tsPackageId, object userState ) {
            if( ( this.GetCMOSImageForTaskSequenceOperationCompleted == null ) ) {
                this.GetCMOSImageForTaskSequenceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMOSImageForTaskSequenceOperationCompleted );
            }
            this.InvokeAsync( "GetCMOSImageForTaskSequence", new object[] {
                    secret,
                    tsPackageId}, this.GetCMOSImageForTaskSequenceOperationCompleted, userState );
        }

        private void OnGetCMOSImageForTaskSequenceOperationCompleted( object arg ) {
            if( ( this.GetCMOSImageForTaskSequenceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMOSImageForTaskSequenceCompleted( this, new GetCMOSImageForTaskSequenceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMUnknownDeviceByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public int RemoveCMUnknownDeviceByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "RemoveCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMUnknownDeviceByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public int EndRemoveCMUnknownDeviceByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMUnknownDeviceByUUIDAsync( string secret, string uuid ) {
            this.RemoveCMUnknownDeviceByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void RemoveCMUnknownDeviceByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.RemoveCMUnknownDeviceByUUIDOperationCompleted == null ) ) {
                this.RemoveCMUnknownDeviceByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMUnknownDeviceByUUIDOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMUnknownDeviceByUUID", new object[] {
                    secret,
                    uuid}, this.RemoveCMUnknownDeviceByUUIDOperationCompleted, userState );
        }

        private void OnRemoveCMUnknownDeviceByUUIDOperationCompleted( object arg ) {
            if( ( this.RemoveCMUnknownDeviceByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMUnknownDeviceByUUIDCompleted( this, new RemoveCMUnknownDeviceByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMDeviceByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public int RemoveCMDeviceByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "RemoveCMDeviceByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMDeviceByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMDeviceByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public int EndRemoveCMDeviceByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMDeviceByUUIDAsync( string secret, string uuid ) {
            this.RemoveCMDeviceByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void RemoveCMDeviceByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.RemoveCMDeviceByUUIDOperationCompleted == null ) ) {
                this.RemoveCMDeviceByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMDeviceByUUIDOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMDeviceByUUID", new object[] {
                    secret,
                    uuid}, this.RemoveCMDeviceByUUIDOperationCompleted, userState );
        }

        private void OnRemoveCMDeviceByUUIDOperationCompleted( object arg ) {
            if( ( this.RemoveCMDeviceByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMDeviceByUUIDCompleted( this, new RemoveCMDeviceByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMDeviceByName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public int RemoveCMDeviceByName( string secret, string name ) {
            object[] results = this.Invoke( "RemoveCMDeviceByName", new object[] {
                    secret,
                    name} );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMDeviceByName( string secret, string name, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMDeviceByName", new object[] {
                    secret,
                    name}, callback, asyncState );
        }

        /// <remarks/>
        public int EndRemoveCMDeviceByName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMDeviceByNameAsync( string secret, string name ) {
            this.RemoveCMDeviceByNameAsync( secret, name, null );
        }

        /// <remarks/>
        public void RemoveCMDeviceByNameAsync( string secret, string name, object userState ) {
            if( ( this.RemoveCMDeviceByNameOperationCompleted == null ) ) {
                this.RemoveCMDeviceByNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMDeviceByNameOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMDeviceByName", new object[] {
                    secret,
                    name}, this.RemoveCMDeviceByNameOperationCompleted, userState );
        }

        private void OnRemoveCMDeviceByNameOperationCompleted( object arg ) {
            if( ( this.RemoveCMDeviceByNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMDeviceByNameCompleted( this, new RemoveCMDeviceByNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMDeviceByResourceID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public int RemoveCMDeviceByResourceID( string secret, string resourceId ) {
            object[] results = this.Invoke( "RemoveCMDeviceByResourceID", new object[] {
                    secret,
                    resourceId} );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMDeviceByResourceID( string secret, string resourceId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMDeviceByResourceID", new object[] {
                    secret,
                    resourceId}, callback, asyncState );
        }

        /// <remarks/>
        public int EndRemoveCMDeviceByResourceID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMDeviceByResourceIDAsync( string secret, string resourceId ) {
            this.RemoveCMDeviceByResourceIDAsync( secret, resourceId, null );
        }

        /// <remarks/>
        public void RemoveCMDeviceByResourceIDAsync( string secret, string resourceId, object userState ) {
            if( ( this.RemoveCMDeviceByResourceIDOperationCompleted == null ) ) {
                this.RemoveCMDeviceByResourceIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMDeviceByResourceIDOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMDeviceByResourceID", new object[] {
                    secret,
                    resourceId}, this.RemoveCMDeviceByResourceIDOperationCompleted, userState );
        }

        private void OnRemoveCMDeviceByResourceIDOperationCompleted( object arg ) {
            if( ( this.RemoveCMDeviceByResourceIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMDeviceByResourceIDCompleted( this, new RemoveCMDeviceByResourceIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMDeviceFromCollection", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveCMDeviceFromCollection( string secret, string deviceName, string collectionId ) {
            object[] results = this.Invoke( "RemoveCMDeviceFromCollection", new object[] {
                    secret,
                    deviceName,
                    collectionId} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMDeviceFromCollection( string secret, string deviceName, string collectionId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMDeviceFromCollection", new object[] {
                    secret,
                    deviceName,
                    collectionId}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveCMDeviceFromCollection( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMDeviceFromCollectionAsync( string secret, string deviceName, string collectionId ) {
            this.RemoveCMDeviceFromCollectionAsync( secret, deviceName, collectionId, null );
        }

        /// <remarks/>
        public void RemoveCMDeviceFromCollectionAsync( string secret, string deviceName, string collectionId, object userState ) {
            if( ( this.RemoveCMDeviceFromCollectionOperationCompleted == null ) ) {
                this.RemoveCMDeviceFromCollectionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMDeviceFromCollectionOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMDeviceFromCollection", new object[] {
                    secret,
                    deviceName,
                    collectionId}, this.RemoveCMDeviceFromCollectionOperationCompleted, userState );
        }

        private void OnRemoveCMDeviceFromCollectionOperationCompleted( object arg ) {
            if( ( this.RemoveCMDeviceFromCollectionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMDeviceFromCollectionCompleted( this, new RemoveCMDeviceFromCollectionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMLastPXEAdvertisementForDevice", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveCMLastPXEAdvertisementForDevice( string secret, string deviceName ) {
            object[] results = this.Invoke( "RemoveCMLastPXEAdvertisementForDevice", new object[] {
                    secret,
                    deviceName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMLastPXEAdvertisementForDevice( string secret, string deviceName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMLastPXEAdvertisementForDevice", new object[] {
                    secret,
                    deviceName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveCMLastPXEAdvertisementForDevice( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMLastPXEAdvertisementForDeviceAsync( string secret, string deviceName ) {
            this.RemoveCMLastPXEAdvertisementForDeviceAsync( secret, deviceName, null );
        }

        /// <remarks/>
        public void RemoveCMLastPXEAdvertisementForDeviceAsync( string secret, string deviceName, object userState ) {
            if( ( this.RemoveCMLastPXEAdvertisementForDeviceOperationCompleted == null ) ) {
                this.RemoveCMLastPXEAdvertisementForDeviceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMLastPXEAdvertisementForDeviceOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMLastPXEAdvertisementForDevice", new object[] {
                    secret,
                    deviceName}, this.RemoveCMLastPXEAdvertisementForDeviceOperationCompleted, userState );
        }

        private void OnRemoveCMLastPXEAdvertisementForDeviceOperationCompleted( object arg ) {
            if( ( this.RemoveCMLastPXEAdvertisementForDeviceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMLastPXEAdvertisementForDeviceCompleted( this, new RemoveCMLastPXEAdvertisementForDeviceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMLastPXEAdvertisementForCollection", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveCMLastPXEAdvertisementForCollection( string secret, string collectionId ) {
            object[] results = this.Invoke( "RemoveCMLastPXEAdvertisementForCollection", new object[] {
                    secret,
                    collectionId} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMLastPXEAdvertisementForCollection( string secret, string collectionId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMLastPXEAdvertisementForCollection", new object[] {
                    secret,
                    collectionId}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveCMLastPXEAdvertisementForCollection( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMLastPXEAdvertisementForCollectionAsync( string secret, string collectionId ) {
            this.RemoveCMLastPXEAdvertisementForCollectionAsync( secret, collectionId, null );
        }

        /// <remarks/>
        public void RemoveCMLastPXEAdvertisementForCollectionAsync( string secret, string collectionId, object userState ) {
            if( ( this.RemoveCMLastPXEAdvertisementForCollectionOperationCompleted == null ) ) {
                this.RemoveCMLastPXEAdvertisementForCollectionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMLastPXEAdvertisementForCollectionOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMLastPXEAdvertisementForCollection", new object[] {
                    secret,
                    collectionId}, this.RemoveCMLastPXEAdvertisementForCollectionOperationCompleted, userState );
        }

        private void OnRemoveCMLastPXEAdvertisementForCollectionOperationCompleted( object arg ) {
            if( ( this.RemoveCMLastPXEAdvertisementForCollectionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMLastPXEAdvertisementForCollectionCompleted( this, new RemoveCMLastPXEAdvertisementForCollectionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddCMComputerAssociationForUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddCMComputerAssociationForUser( string secret, string sourceName, string destinationName, string userName ) {
            object[] results = this.Invoke( "AddCMComputerAssociationForUser", new object[] {
                    secret,
                    sourceName,
                    destinationName,
                    userName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddCMComputerAssociationForUser( string secret, string sourceName, string destinationName, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddCMComputerAssociationForUser", new object[] {
                    secret,
                    sourceName,
                    destinationName,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddCMComputerAssociationForUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddCMComputerAssociationForUserAsync( string secret, string sourceName, string destinationName, string userName ) {
            this.AddCMComputerAssociationForUserAsync( secret, sourceName, destinationName, userName, null );
        }

        /// <remarks/>
        public void AddCMComputerAssociationForUserAsync( string secret, string sourceName, string destinationName, string userName, object userState ) {
            if( ( this.AddCMComputerAssociationForUserOperationCompleted == null ) ) {
                this.AddCMComputerAssociationForUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddCMComputerAssociationForUserOperationCompleted );
            }
            this.InvokeAsync( "AddCMComputerAssociationForUser", new object[] {
                    secret,
                    sourceName,
                    destinationName,
                    userName}, this.AddCMComputerAssociationForUserOperationCompleted, userState );
        }

        private void OnAddCMComputerAssociationForUserOperationCompleted( object arg ) {
            if( ( this.AddCMComputerAssociationForUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddCMComputerAssociationForUserCompleted( this, new AddCMComputerAssociationForUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMComputerAssociation", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveCMComputerAssociation( string secret, string sourceName, string destinationName ) {
            object[] results = this.Invoke( "RemoveCMComputerAssociation", new object[] {
                    secret,
                    sourceName,
                    destinationName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMComputerAssociation( string secret, string sourceName, string destinationName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMComputerAssociation", new object[] {
                    secret,
                    sourceName,
                    destinationName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveCMComputerAssociation( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMComputerAssociationAsync( string secret, string sourceName, string destinationName ) {
            this.RemoveCMComputerAssociationAsync( secret, sourceName, destinationName, null );
        }

        /// <remarks/>
        public void RemoveCMComputerAssociationAsync( string secret, string sourceName, string destinationName, object userState ) {
            if( ( this.RemoveCMComputerAssociationOperationCompleted == null ) ) {
                this.RemoveCMComputerAssociationOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMComputerAssociationOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMComputerAssociation", new object[] {
                    secret,
                    sourceName,
                    destinationName}, this.RemoveCMComputerAssociationOperationCompleted, userState );
        }

        private void OnRemoveCMComputerAssociationOperationCompleted( object arg ) {
            if( ( this.RemoveCMComputerAssociationCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMComputerAssociationCompleted( this, new RemoveCMComputerAssociationCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMApplicationDeploymentsByCollectionID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetCMApplicationDeploymentsByCollectionID( string secret, string collId ) {
            object[] results = this.Invoke( "GetCMApplicationDeploymentsByCollectionID", new object[] {
                    secret,
                    collId} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMApplicationDeploymentsByCollectionID( string secret, string collId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMApplicationDeploymentsByCollectionID", new object[] {
                    secret,
                    collId}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetCMApplicationDeploymentsByCollectionID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMApplicationDeploymentsByCollectionIDAsync( string secret, string collId ) {
            this.GetCMApplicationDeploymentsByCollectionIDAsync( secret, collId, null );
        }

        /// <remarks/>
        public void GetCMApplicationDeploymentsByCollectionIDAsync( string secret, string collId, object userState ) {
            if( ( this.GetCMApplicationDeploymentsByCollectionIDOperationCompleted == null ) ) {
                this.GetCMApplicationDeploymentsByCollectionIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMApplicationDeploymentsByCollectionIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMApplicationDeploymentsByCollectionID", new object[] {
                    secret,
                    collId}, this.GetCMApplicationDeploymentsByCollectionIDOperationCompleted, userState );
        }

        private void OnGetCMApplicationDeploymentsByCollectionIDOperationCompleted( object arg ) {
            if( ( this.GetCMApplicationDeploymentsByCollectionIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMApplicationDeploymentsByCollectionIDCompleted( this, new GetCMApplicationDeploymentsByCollectionIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMCollectionsForDeviceByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMCollection[] GetCMCollectionsForDeviceByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetCMCollectionsForDeviceByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMCollectionsForDeviceByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMCollectionsForDeviceByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public CMCollection[] EndGetCMCollectionsForDeviceByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByUUIDAsync( string secret, string uuid ) {
            this.GetCMCollectionsForDeviceByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetCMCollectionsForDeviceByUUIDOperationCompleted == null ) ) {
                this.GetCMCollectionsForDeviceByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMCollectionsForDeviceByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMCollectionsForDeviceByUUID", new object[] {
                    secret,
                    uuid}, this.GetCMCollectionsForDeviceByUUIDOperationCompleted, userState );
        }

        private void OnGetCMCollectionsForDeviceByUUIDOperationCompleted( object arg ) {
            if( ( this.GetCMCollectionsForDeviceByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMCollectionsForDeviceByUUIDCompleted( this, new GetCMCollectionsForDeviceByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMCollectionsForDeviceByName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMCollection[] GetCMCollectionsForDeviceByName( string secret, string deviceName ) {
            object[] results = this.Invoke( "GetCMCollectionsForDeviceByName", new object[] {
                    secret,
                    deviceName} );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMCollectionsForDeviceByName( string secret, string deviceName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMCollectionsForDeviceByName", new object[] {
                    secret,
                    deviceName}, callback, asyncState );
        }

        /// <remarks/>
        public CMCollection[] EndGetCMCollectionsForDeviceByName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByNameAsync( string secret, string deviceName ) {
            this.GetCMCollectionsForDeviceByNameAsync( secret, deviceName, null );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByNameAsync( string secret, string deviceName, object userState ) {
            if( ( this.GetCMCollectionsForDeviceByNameOperationCompleted == null ) ) {
                this.GetCMCollectionsForDeviceByNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMCollectionsForDeviceByNameOperationCompleted );
            }
            this.InvokeAsync( "GetCMCollectionsForDeviceByName", new object[] {
                    secret,
                    deviceName}, this.GetCMCollectionsForDeviceByNameOperationCompleted, userState );
        }

        private void OnGetCMCollectionsForDeviceByNameOperationCompleted( object arg ) {
            if( ( this.GetCMCollectionsForDeviceByNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMCollectionsForDeviceByNameCompleted( this, new GetCMCollectionsForDeviceByNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMCollectionsForDeviceByResourceID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMCollection[] GetCMCollectionsForDeviceByResourceID( string secret, string resourceId ) {
            object[] results = this.Invoke( "GetCMCollectionsForDeviceByResourceID", new object[] {
                    secret,
                    resourceId} );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMCollectionsForDeviceByResourceID( string secret, string resourceId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMCollectionsForDeviceByResourceID", new object[] {
                    secret,
                    resourceId}, callback, asyncState );
        }

        /// <remarks/>
        public CMCollection[] EndGetCMCollectionsForDeviceByResourceID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMCollection[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByResourceIDAsync( string secret, string resourceId ) {
            this.GetCMCollectionsForDeviceByResourceIDAsync( secret, resourceId, null );
        }

        /// <remarks/>
        public void GetCMCollectionsForDeviceByResourceIDAsync( string secret, string resourceId, object userState ) {
            if( ( this.GetCMCollectionsForDeviceByResourceIDOperationCompleted == null ) ) {
                this.GetCMCollectionsForDeviceByResourceIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMCollectionsForDeviceByResourceIDOperationCompleted );
            }
            this.InvokeAsync( "GetCMCollectionsForDeviceByResourceID", new object[] {
                    secret,
                    resourceId}, this.GetCMCollectionsForDeviceByResourceIDOperationCompleted, userState );
        }

        private void OnGetCMCollectionsForDeviceByResourceIDOperationCompleted( object arg ) {
            if( ( this.GetCMCollectionsForDeviceByResourceIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMCollectionsForDeviceByResourceIDCompleted( this, new GetCMCollectionsForDeviceByResourceIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMApplicationByCategory", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMApplication[] GetCMApplicationByCategory( string secret, string categoryName ) {
            object[] results = this.Invoke( "GetCMApplicationByCategory", new object[] {
                    secret,
                    categoryName} );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMApplicationByCategory( string secret, string categoryName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMApplicationByCategory", new object[] {
                    secret,
                    categoryName}, callback, asyncState );
        }

        /// <remarks/>
        public CMApplication[] EndGetCMApplicationByCategory( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMApplicationByCategoryAsync( string secret, string categoryName ) {
            this.GetCMApplicationByCategoryAsync( secret, categoryName, null );
        }

        /// <remarks/>
        public void GetCMApplicationByCategoryAsync( string secret, string categoryName, object userState ) {
            if( ( this.GetCMApplicationByCategoryOperationCompleted == null ) ) {
                this.GetCMApplicationByCategoryOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMApplicationByCategoryOperationCompleted );
            }
            this.InvokeAsync( "GetCMApplicationByCategory", new object[] {
                    secret,
                    categoryName}, this.GetCMApplicationByCategoryOperationCompleted, userState );
        }

        private void OnGetCMApplicationByCategoryOperationCompleted( object arg ) {
            if( ( this.GetCMApplicationByCategoryCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMApplicationByCategoryCompleted( this, new GetCMApplicationByCategoryCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMApplication", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMApplication[] GetCMApplication( string secret, string filter ) {
            object[] results = this.Invoke( "GetCMApplication", new object[] {
                    secret,
                    filter} );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMApplication( string secret, string filter, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMApplication", new object[] {
                    secret,
                    filter}, callback, asyncState );
        }

        /// <remarks/>
        public CMApplication[] EndGetCMApplication( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMApplication[])( results[0] ) );
        }

        /// <remarks/>
        public void GetCMApplicationAsync( string secret, string filter ) {
            this.GetCMApplicationAsync( secret, filter, null );
        }

        /// <remarks/>
        public void GetCMApplicationAsync( string secret, string filter, object userState ) {
            if( ( this.GetCMApplicationOperationCompleted == null ) ) {
                this.GetCMApplicationOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMApplicationOperationCompleted );
            }
            this.InvokeAsync( "GetCMApplication", new object[] {
                    secret,
                    filter}, this.GetCMApplicationOperationCompleted, userState );
        }

        private void OnGetCMApplicationOperationCompleted( object arg ) {
            if( ( this.GetCMApplicationCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMApplicationCompleted( this, new GetCMApplicationCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveCMPrimaryUserByDeviceResourceId", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public int RemoveCMPrimaryUserByDeviceResourceId( string secret, string resourceId ) {
            object[] results = this.Invoke( "RemoveCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId} );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveCMPrimaryUserByDeviceResourceId( string secret, string resourceId, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId}, callback, asyncState );
        }

        /// <remarks/>
        public int EndRemoveCMPrimaryUserByDeviceResourceId( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (int)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveCMPrimaryUserByDeviceResourceIdAsync( string secret, string resourceId ) {
            this.RemoveCMPrimaryUserByDeviceResourceIdAsync( secret, resourceId, null );
        }

        /// <remarks/>
        public void RemoveCMPrimaryUserByDeviceResourceIdAsync( string secret, string resourceId, object userState ) {
            if( ( this.RemoveCMPrimaryUserByDeviceResourceIdOperationCompleted == null ) ) {
                this.RemoveCMPrimaryUserByDeviceResourceIdOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveCMPrimaryUserByDeviceResourceIdOperationCompleted );
            }
            this.InvokeAsync( "RemoveCMPrimaryUserByDeviceResourceId", new object[] {
                    secret,
                    resourceId}, this.RemoveCMPrimaryUserByDeviceResourceIdOperationCompleted, userState );
        }

        private void OnRemoveCMPrimaryUserByDeviceResourceIdOperationCompleted( object arg ) {
            if( ( this.RemoveCMPrimaryUserByDeviceResourceIdCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveCMPrimaryUserByDeviceResourceIdCompleted( this, new RemoveCMPrimaryUserByDeviceResourceIdCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMFirstAvailableNameSequence", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetCMFirstAvailableNameSequence( string secret, int suffixLength, string computerNamefilter ) {
            object[] results = this.Invoke( "GetCMFirstAvailableNameSequence", new object[] {
                    secret,
                    suffixLength,
                    computerNamefilter} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMFirstAvailableNameSequence( string secret, int suffixLength, string computerNamefilter, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMFirstAvailableNameSequence", new object[] {
                    secret,
                    suffixLength,
                    computerNamefilter}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetCMFirstAvailableNameSequence( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMFirstAvailableNameSequenceAsync( string secret, int suffixLength, string computerNamefilter ) {
            this.GetCMFirstAvailableNameSequenceAsync( secret, suffixLength, computerNamefilter, null );
        }

        /// <remarks/>
        public void GetCMFirstAvailableNameSequenceAsync( string secret, int suffixLength, string computerNamefilter, object userState ) {
            if( ( this.GetCMFirstAvailableNameSequenceOperationCompleted == null ) ) {
                this.GetCMFirstAvailableNameSequenceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMFirstAvailableNameSequenceOperationCompleted );
            }
            this.InvokeAsync( "GetCMFirstAvailableNameSequence", new object[] {
                    secret,
                    suffixLength,
                    computerNamefilter}, this.GetCMFirstAvailableNameSequenceOperationCompleted, userState );
        }

        private void OnGetCMFirstAvailableNameSequenceOperationCompleted( object arg ) {
            if( ( this.GetCMFirstAvailableNameSequenceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMFirstAvailableNameSequenceCompleted( this, new GetCMFirstAvailableNameSequenceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetCMTaskSequence", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public CMTaskSequence GetCMTaskSequence( string secret, string packageID ) {
            object[] results = this.Invoke( "GetCMTaskSequence", new object[] {
                    secret,
                    packageID} );
            return ( (CMTaskSequence)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCMTaskSequence( string secret, string packageID, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetCMTaskSequence", new object[] {
                    secret,
                    packageID}, callback, asyncState );
        }

        /// <remarks/>
        public CMTaskSequence EndGetCMTaskSequence( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (CMTaskSequence)( results[0] ) );
        }

        /// <remarks/>
        public void GetCMTaskSequenceAsync( string secret, string packageID ) {
            this.GetCMTaskSequenceAsync( secret, packageID, null );
        }

        /// <remarks/>
        public void GetCMTaskSequenceAsync( string secret, string packageID, object userState ) {
            if( ( this.GetCMTaskSequenceOperationCompleted == null ) ) {
                this.GetCMTaskSequenceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCMTaskSequenceOperationCompleted );
            }
            this.InvokeAsync( "GetCMTaskSequence", new object[] {
                    secret,
                    packageID}, this.GetCMTaskSequenceOperationCompleted, userState );
        }

        private void OnGetCMTaskSequenceOperationCompleted( object arg ) {
            if( ( this.GetCMTaskSequenceCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCMTaskSequenceCompleted( this, new GetCMTaskSequenceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/SetADOrganizationalUnitForComputer", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool SetADOrganizationalUnitForComputer( string secret, string organizationalUnitLocation, string computerName ) {
            object[] results = this.Invoke( "SetADOrganizationalUnitForComputer", new object[] {
                    secret,
                    organizationalUnitLocation,
                    computerName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetADOrganizationalUnitForComputer( string secret, string organizationalUnitLocation, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "SetADOrganizationalUnitForComputer", new object[] {
                    secret,
                    organizationalUnitLocation,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndSetADOrganizationalUnitForComputer( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void SetADOrganizationalUnitForComputerAsync( string secret, string organizationalUnitLocation, string computerName ) {
            this.SetADOrganizationalUnitForComputerAsync( secret, organizationalUnitLocation, computerName, null );
        }

        /// <remarks/>
        public void SetADOrganizationalUnitForComputerAsync( string secret, string organizationalUnitLocation, string computerName, object userState ) {
            if( ( this.SetADOrganizationalUnitForComputerOperationCompleted == null ) ) {
                this.SetADOrganizationalUnitForComputerOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetADOrganizationalUnitForComputerOperationCompleted );
            }
            this.InvokeAsync( "SetADOrganizationalUnitForComputer", new object[] {
                    secret,
                    organizationalUnitLocation,
                    computerName}, this.SetADOrganizationalUnitForComputerOperationCompleted, userState );
        }

        private void OnSetADOrganizationalUnitForComputerOperationCompleted( object arg ) {
            if( ( this.SetADOrganizationalUnitForComputerCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetADOrganizationalUnitForComputerCompleted( this, new SetADOrganizationalUnitForComputerCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/SetADComputerManagedBy", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool SetADComputerManagedBy( string secret, string computerName, string userName ) {
            object[] results = this.Invoke( "SetADComputerManagedBy", new object[] {
                    secret,
                    computerName,
                    userName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetADComputerManagedBy( string secret, string computerName, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "SetADComputerManagedBy", new object[] {
                    secret,
                    computerName,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndSetADComputerManagedBy( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void SetADComputerManagedByAsync( string secret, string computerName, string userName ) {
            this.SetADComputerManagedByAsync( secret, computerName, userName, null );
        }

        /// <remarks/>
        public void SetADComputerManagedByAsync( string secret, string computerName, string userName, object userState ) {
            if( ( this.SetADComputerManagedByOperationCompleted == null ) ) {
                this.SetADComputerManagedByOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetADComputerManagedByOperationCompleted );
            }
            this.InvokeAsync( "SetADComputerManagedBy", new object[] {
                    secret,
                    computerName,
                    userName}, this.SetADComputerManagedByOperationCompleted, userState );
        }

        private void OnSetADComputerManagedByOperationCompleted( object arg ) {
            if( ( this.SetADComputerManagedByCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetADComputerManagedByCompleted( this, new SetADComputerManagedByCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddADComputerToGroup", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddADComputerToGroup( string secret, string groupName, string computerName ) {
            object[] results = this.Invoke( "AddADComputerToGroup", new object[] {
                    secret,
                    groupName,
                    computerName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddADComputerToGroup( string secret, string groupName, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddADComputerToGroup", new object[] {
                    secret,
                    groupName,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddADComputerToGroup( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddADComputerToGroupAsync( string secret, string groupName, string computerName ) {
            this.AddADComputerToGroupAsync( secret, groupName, computerName, null );
        }

        /// <remarks/>
        public void AddADComputerToGroupAsync( string secret, string groupName, string computerName, object userState ) {
            if( ( this.AddADComputerToGroupOperationCompleted == null ) ) {
                this.AddADComputerToGroupOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddADComputerToGroupOperationCompleted );
            }
            this.InvokeAsync( "AddADComputerToGroup", new object[] {
                    secret,
                    groupName,
                    computerName}, this.AddADComputerToGroupOperationCompleted, userState );
        }

        private void OnAddADComputerToGroupOperationCompleted( object arg ) {
            if( ( this.AddADComputerToGroupCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddADComputerToGroupCompleted( this, new AddADComputerToGroupCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveADComputerFromGroup", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveADComputerFromGroup( string secret, string groupName, string computerName ) {
            object[] results = this.Invoke( "RemoveADComputerFromGroup", new object[] {
                    secret,
                    groupName,
                    computerName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveADComputerFromGroup( string secret, string groupName, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveADComputerFromGroup", new object[] {
                    secret,
                    groupName,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveADComputerFromGroup( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveADComputerFromGroupAsync( string secret, string groupName, string computerName ) {
            this.RemoveADComputerFromGroupAsync( secret, groupName, computerName, null );
        }

        /// <remarks/>
        public void RemoveADComputerFromGroupAsync( string secret, string groupName, string computerName, object userState ) {
            if( ( this.RemoveADComputerFromGroupOperationCompleted == null ) ) {
                this.RemoveADComputerFromGroupOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveADComputerFromGroupOperationCompleted );
            }
            this.InvokeAsync( "RemoveADComputerFromGroup", new object[] {
                    secret,
                    groupName,
                    computerName}, this.RemoveADComputerFromGroupOperationCompleted, userState );
        }

        private void OnRemoveADComputerFromGroupOperationCompleted( object arg ) {
            if( ( this.RemoveADComputerFromGroupCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveADComputerFromGroupCompleted( this, new RemoveADComputerFromGroupCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADGroupMembers", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetADGroupMembers( string secret, string groupName ) {
            object[] results = this.Invoke( "GetADGroupMembers", new object[] {
                    secret,
                    groupName} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADGroupMembers( string secret, string groupName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADGroupMembers", new object[] {
                    secret,
                    groupName}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetADGroupMembers( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetADGroupMembersAsync( string secret, string groupName ) {
            this.GetADGroupMembersAsync( secret, groupName, null );
        }

        /// <remarks/>
        public void GetADGroupMembersAsync( string secret, string groupName, object userState ) {
            if( ( this.GetADGroupMembersOperationCompleted == null ) ) {
                this.GetADGroupMembersOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADGroupMembersOperationCompleted );
            }
            this.InvokeAsync( "GetADGroupMembers", new object[] {
                    secret,
                    groupName}, this.GetADGroupMembersOperationCompleted, userState );
        }

        private void OnGetADGroupMembersOperationCompleted( object arg ) {
            if( ( this.GetADGroupMembersCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADGroupMembersCompleted( this, new GetADGroupMembersCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADGroupsByUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public ADGroup[] GetADGroupsByUser( string secret, string userName ) {
            object[] results = this.Invoke( "GetADGroupsByUser", new object[] {
                    secret,
                    userName} );
            return ( (ADGroup[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADGroupsByUser( string secret, string userName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADGroupsByUser", new object[] {
                    secret,
                    userName}, callback, asyncState );
        }

        /// <remarks/>
        public ADGroup[] EndGetADGroupsByUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (ADGroup[])( results[0] ) );
        }

        /// <remarks/>
        public void GetADGroupsByUserAsync( string secret, string userName ) {
            this.GetADGroupsByUserAsync( secret, userName, null );
        }

        /// <remarks/>
        public void GetADGroupsByUserAsync( string secret, string userName, object userState ) {
            if( ( this.GetADGroupsByUserOperationCompleted == null ) ) {
                this.GetADGroupsByUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADGroupsByUserOperationCompleted );
            }
            this.InvokeAsync( "GetADGroupsByUser", new object[] {
                    secret,
                    userName}, this.GetADGroupsByUserOperationCompleted, userState );
        }

        private void OnGetADGroupsByUserOperationCompleted( object arg ) {
            if( ( this.GetADGroupsByUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADGroupsByUserCompleted( this, new GetADGroupsByUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/SetADComputerDescription", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool SetADComputerDescription( string secret, string computerName, string description ) {
            object[] results = this.Invoke( "SetADComputerDescription", new object[] {
                    secret,
                    computerName,
                    description} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetADComputerDescription( string secret, string computerName, string description, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "SetADComputerDescription", new object[] {
                    secret,
                    computerName,
                    description}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndSetADComputerDescription( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void SetADComputerDescriptionAsync( string secret, string computerName, string description ) {
            this.SetADComputerDescriptionAsync( secret, computerName, description, null );
        }

        /// <remarks/>
        public void SetADComputerDescriptionAsync( string secret, string computerName, string description, object userState ) {
            if( ( this.SetADComputerDescriptionOperationCompleted == null ) ) {
                this.SetADComputerDescriptionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetADComputerDescriptionOperationCompleted );
            }
            this.InvokeAsync( "SetADComputerDescription", new object[] {
                    secret,
                    computerName,
                    description}, this.SetADComputerDescriptionOperationCompleted, userState );
        }

        private void OnSetADComputerDescriptionOperationCompleted( object arg ) {
            if( ( this.SetADComputerDescriptionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetADComputerDescriptionCompleted( this, new SetADComputerDescriptionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADComputerDescription", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetADComputerDescription( string secret, string computerName ) {
            object[] results = this.Invoke( "GetADComputerDescription", new object[] {
                    secret,
                    computerName} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADComputerDescription( string secret, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADComputerDescription", new object[] {
                    secret,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetADComputerDescription( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetADComputerDescriptionAsync( string secret, string computerName ) {
            this.GetADComputerDescriptionAsync( secret, computerName, null );
        }

        /// <remarks/>
        public void GetADComputerDescriptionAsync( string secret, string computerName, object userState ) {
            if( ( this.GetADComputerDescriptionOperationCompleted == null ) ) {
                this.GetADComputerDescriptionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADComputerDescriptionOperationCompleted );
            }
            this.InvokeAsync( "GetADComputerDescription", new object[] {
                    secret,
                    computerName}, this.GetADComputerDescriptionOperationCompleted, userState );
        }

        private void OnGetADComputerDescriptionOperationCompleted( object arg ) {
            if( ( this.GetADComputerDescriptionCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADComputerDescriptionCompleted( this, new GetADComputerDescriptionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADSiteNameByIPAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetADSiteNameByIPAddress( string secret, string forestName, string ipAddress ) {
            object[] results = this.Invoke( "GetADSiteNameByIPAddress", new object[] {
                    secret,
                    forestName,
                    ipAddress} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADSiteNameByIPAddress( string secret, string forestName, string ipAddress, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADSiteNameByIPAddress", new object[] {
                    secret,
                    forestName,
                    ipAddress}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetADSiteNameByIPAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetADSiteNameByIPAddressAsync( string secret, string forestName, string ipAddress ) {
            this.GetADSiteNameByIPAddressAsync( secret, forestName, ipAddress, null );
        }

        /// <remarks/>
        public void GetADSiteNameByIPAddressAsync( string secret, string forestName, string ipAddress, object userState ) {
            if( ( this.GetADSiteNameByIPAddressOperationCompleted == null ) ) {
                this.GetADSiteNameByIPAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADSiteNameByIPAddressOperationCompleted );
            }
            this.InvokeAsync( "GetADSiteNameByIPAddress", new object[] {
                    secret,
                    forestName,
                    ipAddress}, this.GetADSiteNameByIPAddressOperationCompleted, userState );
        }

        private void OnGetADSiteNameByIPAddressOperationCompleted( object arg ) {
            if( ( this.GetADSiteNameByIPAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADSiteNameByIPAddressCompleted( this, new GetADSiteNameByIPAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADGroupMemberByUser", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool GetADGroupMemberByUser( string secret, string userName, string groupName, string domain ) {
            object[] results = this.Invoke( "GetADGroupMemberByUser", new object[] {
                    secret,
                    userName,
                    groupName,
                    domain} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADGroupMemberByUser( string secret, string userName, string groupName, string domain, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADGroupMemberByUser", new object[] {
                    secret,
                    userName,
                    groupName,
                    domain}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndGetADGroupMemberByUser( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void GetADGroupMemberByUserAsync( string secret, string userName, string groupName, string domain ) {
            this.GetADGroupMemberByUserAsync( secret, userName, groupName, domain, null );
        }

        /// <remarks/>
        public void GetADGroupMemberByUserAsync( string secret, string userName, string groupName, string domain, object userState ) {
            if( ( this.GetADGroupMemberByUserOperationCompleted == null ) ) {
                this.GetADGroupMemberByUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADGroupMemberByUserOperationCompleted );
            }
            this.InvokeAsync( "GetADGroupMemberByUser", new object[] {
                    secret,
                    userName,
                    groupName,
                    domain}, this.GetADGroupMemberByUserOperationCompleted, userState );
        }

        private void OnGetADGroupMemberByUserOperationCompleted( object arg ) {
            if( ( this.GetADGroupMemberByUserCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADGroupMemberByUserCompleted( this, new GetADGroupMemberByUserCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADGroupMemberByComputer", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool GetADGroupMemberByComputer( string secret, string computerName, string groupName, string domain ) {
            object[] results = this.Invoke( "GetADGroupMemberByComputer", new object[] {
                    secret,
                    computerName,
                    groupName,
                    domain} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADGroupMemberByComputer( string secret, string computerName, string groupName, string domain, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADGroupMemberByComputer", new object[] {
                    secret,
                    computerName,
                    groupName,
                    domain}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndGetADGroupMemberByComputer( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void GetADGroupMemberByComputerAsync( string secret, string computerName, string groupName, string domain ) {
            this.GetADGroupMemberByComputerAsync( secret, computerName, groupName, domain, null );
        }

        /// <remarks/>
        public void GetADGroupMemberByComputerAsync( string secret, string computerName, string groupName, string domain, object userState ) {
            if( ( this.GetADGroupMemberByComputerOperationCompleted == null ) ) {
                this.GetADGroupMemberByComputerOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADGroupMemberByComputerOperationCompleted );
            }
            this.InvokeAsync( "GetADGroupMemberByComputer", new object[] {
                    secret,
                    computerName,
                    groupName,
                    domain}, this.GetADGroupMemberByComputerOperationCompleted, userState );
        }

        private void OnGetADGroupMemberByComputerOperationCompleted( object arg ) {
            if( ( this.GetADGroupMemberByComputerCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADGroupMemberByComputerCompleted( this, new GetADGroupMemberByComputerCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADComputer", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public ADComputer GetADComputer( string secret, string computerName ) {
            object[] results = this.Invoke( "GetADComputer", new object[] {
                    secret,
                    computerName} );
            return ( (ADComputer)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADComputer( string secret, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADComputer", new object[] {
                    secret,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public ADComputer EndGetADComputer( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (ADComputer)( results[0] ) );
        }

        /// <remarks/>
        public void GetADComputerAsync( string secret, string computerName ) {
            this.GetADComputerAsync( secret, computerName, null );
        }

        /// <remarks/>
        public void GetADComputerAsync( string secret, string computerName, object userState ) {
            if( ( this.GetADComputerOperationCompleted == null ) ) {
                this.GetADComputerOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADComputerOperationCompleted );
            }
            this.InvokeAsync( "GetADComputer", new object[] {
                    secret,
                    computerName}, this.GetADComputerOperationCompleted, userState );
        }

        private void OnGetADComputerOperationCompleted( object arg ) {
            if( ( this.GetADComputerCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADComputerCompleted( this, new GetADComputerCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveADComputer", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveADComputer( string secret, string samAccountName ) {
            object[] results = this.Invoke( "RemoveADComputer", new object[] {
                    secret,
                    samAccountName} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveADComputer( string secret, string samAccountName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveADComputer", new object[] {
                    secret,
                    samAccountName}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveADComputer( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveADComputerAsync( string secret, string samAccountName ) {
            this.RemoveADComputerAsync( secret, samAccountName, null );
        }

        /// <remarks/>
        public void RemoveADComputerAsync( string secret, string samAccountName, object userState ) {
            if( ( this.RemoveADComputerOperationCompleted == null ) ) {
                this.RemoveADComputerOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveADComputerOperationCompleted );
            }
            this.InvokeAsync( "RemoveADComputer", new object[] {
                    secret,
                    samAccountName}, this.RemoveADComputerOperationCompleted, userState );
        }

        private void OnRemoveADComputerOperationCompleted( object arg ) {
            if( ( this.RemoveADComputerCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveADComputerCompleted( this, new RemoveADComputerCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADDomain", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public ADDomain GetADDomain( string secret ) {
            object[] results = this.Invoke( "GetADDomain", new object[] {
                    secret} );
            return ( (ADDomain)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADDomain( string secret, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADDomain", new object[] {
                    secret}, callback, asyncState );
        }

        /// <remarks/>
        public ADDomain EndGetADDomain( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (ADDomain)( results[0] ) );
        }

        /// <remarks/>
        public void GetADDomainAsync( string secret ) {
            this.GetADDomainAsync( secret, null );
        }

        /// <remarks/>
        public void GetADDomainAsync( string secret, object userState ) {
            if( ( this.GetADDomainOperationCompleted == null ) ) {
                this.GetADDomainOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADDomainOperationCompleted );
            }
            this.InvokeAsync( "GetADDomain", new object[] {
                    secret}, this.GetADDomainOperationCompleted, userState );
        }

        private void OnGetADDomainOperationCompleted( object arg ) {
            if( ( this.GetADDomainCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADDomainCompleted( this, new GetADDomainCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetADOrganizationalUnits", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public ADOrganizationalUnit[] GetADOrganizationalUnits( string secret, string distinguishedName ) {
            object[] results = this.Invoke( "GetADOrganizationalUnits", new object[] {
                    secret,
                    distinguishedName} );
            return ( (ADOrganizationalUnit[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetADOrganizationalUnits( string secret, string distinguishedName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetADOrganizationalUnits", new object[] {
                    secret,
                    distinguishedName}, callback, asyncState );
        }

        /// <remarks/>
        public ADOrganizationalUnit[] EndGetADOrganizationalUnits( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (ADOrganizationalUnit[])( results[0] ) );
        }

        /// <remarks/>
        public void GetADOrganizationalUnitsAsync( string secret, string distinguishedName ) {
            this.GetADOrganizationalUnitsAsync( secret, distinguishedName, null );
        }

        /// <remarks/>
        public void GetADOrganizationalUnitsAsync( string secret, string distinguishedName, object userState ) {
            if( ( this.GetADOrganizationalUnitsOperationCompleted == null ) ) {
                this.GetADOrganizationalUnitsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetADOrganizationalUnitsOperationCompleted );
            }
            this.InvokeAsync( "GetADOrganizationalUnits", new object[] {
                    secret,
                    distinguishedName}, this.GetADOrganizationalUnitsOperationCompleted, userState );
        }

        private void OnGetADOrganizationalUnitsOperationCompleted( object arg ) {
            if( ( this.GetADOrganizationalUnitsCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetADOrganizationalUnitsCompleted( this, new GetADOrganizationalUnitsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/NewCWEventLogEntry", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool NewCWEventLogEntry( string secret, string value ) {
            object[] results = this.Invoke( "NewCWEventLogEntry", new object[] {
                    secret,
                    value} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginNewCWEventLogEntry( string secret, string value, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "NewCWEventLogEntry", new object[] {
                    secret,
                    value}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndNewCWEventLogEntry( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void NewCWEventLogEntryAsync( string secret, string value ) {
            this.NewCWEventLogEntryAsync( secret, value, null );
        }

        /// <remarks/>
        public void NewCWEventLogEntryAsync( string secret, string value, object userState ) {
            if( ( this.NewCWEventLogEntryOperationCompleted == null ) ) {
                this.NewCWEventLogEntryOperationCompleted = new System.Threading.SendOrPostCallback( this.OnNewCWEventLogEntryOperationCompleted );
            }
            this.InvokeAsync( "NewCWEventLogEntry", new object[] {
                    secret,
                    value}, this.NewCWEventLogEntryOperationCompleted, userState );
        }

        private void OnNewCWEventLogEntryOperationCompleted( object arg ) {
            if( ( this.NewCWEventLogEntryCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.NewCWEventLogEntryCompleted( this, new NewCWEventLogEntryCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTRoles", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetMDTRoles( string secret ) {
            object[] results = this.Invoke( "GetMDTRoles", new object[] {
                    secret} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTRoles( string secret, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTRoles", new object[] {
                    secret}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetMDTRoles( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTRolesAsync( string secret ) {
            this.GetMDTRolesAsync( secret, null );
        }

        /// <remarks/>
        public void GetMDTRolesAsync( string secret, object userState ) {
            if( ( this.GetMDTRolesOperationCompleted == null ) ) {
                this.GetMDTRolesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTRolesOperationCompleted );
            }
            this.InvokeAsync( "GetMDTRoles", new object[] {
                    secret}, this.GetMDTRolesOperationCompleted, userState );
        }

        private void OnGetMDTRolesOperationCompleted( object arg ) {
            if( ( this.GetMDTRolesCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTRolesCompleted( this, new GetMDTRolesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerByAssetTag", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetMDTComputerByAssetTag( string secret, string assetTag ) {
            object[] results = this.Invoke( "GetMDTComputerByAssetTag", new object[] {
                    secret,
                    assetTag} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerByAssetTag( string secret, string assetTag, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerByAssetTag", new object[] {
                    secret,
                    assetTag}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetMDTComputerByAssetTag( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerByAssetTagAsync( string secret, string assetTag ) {
            this.GetMDTComputerByAssetTagAsync( secret, assetTag, null );
        }

        /// <remarks/>
        public void GetMDTComputerByAssetTagAsync( string secret, string assetTag, object userState ) {
            if( ( this.GetMDTComputerByAssetTagOperationCompleted == null ) ) {
                this.GetMDTComputerByAssetTagOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerByAssetTagOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerByAssetTag", new object[] {
                    secret,
                    assetTag}, this.GetMDTComputerByAssetTagOperationCompleted, userState );
        }

        private void OnGetMDTComputerByAssetTagOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerByAssetTagCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerByAssetTagCompleted( this, new GetMDTComputerByAssetTagCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerByMacAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetMDTComputerByMacAddress( string secret, string macAddress ) {
            object[] results = this.Invoke( "GetMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerByMacAddress( string secret, string macAddress, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetMDTComputerByMacAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerByMacAddressAsync( string secret, string macAddress ) {
            this.GetMDTComputerByMacAddressAsync( secret, macAddress, null );
        }

        /// <remarks/>
        public void GetMDTComputerByMacAddressAsync( string secret, string macAddress, object userState ) {
            if( ( this.GetMDTComputerByMacAddressOperationCompleted == null ) ) {
                this.GetMDTComputerByMacAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerByMacAddressOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress}, this.GetMDTComputerByMacAddressOperationCompleted, userState );
        }

        private void OnGetMDTComputerByMacAddressOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerByMacAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerByMacAddressCompleted( this, new GetMDTComputerByMacAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerBySerialNumber", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetMDTComputerBySerialNumber( string secret, string serialNumber ) {
            object[] results = this.Invoke( "GetMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerBySerialNumber( string secret, string serialNumber, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetMDTComputerBySerialNumber( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerBySerialNumberAsync( string secret, string serialNumber ) {
            this.GetMDTComputerBySerialNumberAsync( secret, serialNumber, null );
        }

        /// <remarks/>
        public void GetMDTComputerBySerialNumberAsync( string secret, string serialNumber, object userState ) {
            if( ( this.GetMDTComputerBySerialNumberOperationCompleted == null ) ) {
                this.GetMDTComputerBySerialNumberOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerBySerialNumberOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber}, this.GetMDTComputerBySerialNumberOperationCompleted, userState );
        }

        private void OnGetMDTComputerBySerialNumberOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerBySerialNumberCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerBySerialNumberCompleted( this, new GetMDTComputerBySerialNumberCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetMDTComputerByUUID( string secret, string uuid ) {
            object[] results = this.Invoke( "GetMDTComputerByUUID", new object[] {
                    secret,
                    uuid} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerByUUID( string secret, string uuid, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerByUUID", new object[] {
                    secret,
                    uuid}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetMDTComputerByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerByUUIDAsync( string secret, string uuid ) {
            this.GetMDTComputerByUUIDAsync( secret, uuid, null );
        }

        /// <remarks/>
        public void GetMDTComputerByUUIDAsync( string secret, string uuid, object userState ) {
            if( ( this.GetMDTComputerByUUIDOperationCompleted == null ) ) {
                this.GetMDTComputerByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerByUUIDOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerByUUID", new object[] {
                    secret,
                    uuid}, this.GetMDTComputerByUUIDOperationCompleted, userState );
        }

        private void OnGetMDTComputerByUUIDOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerByUUIDCompleted( this, new GetMDTComputerByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTDetailedComputerRoleMembership", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public MDTRole[] GetMDTDetailedComputerRoleMembership( string secret, string identity ) {
            object[] results = this.Invoke( "GetMDTDetailedComputerRoleMembership", new object[] {
                    secret,
                    identity} );
            return ( (MDTRole[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTDetailedComputerRoleMembership( string secret, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTDetailedComputerRoleMembership", new object[] {
                    secret,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public MDTRole[] EndGetMDTDetailedComputerRoleMembership( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (MDTRole[])( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTDetailedComputerRoleMembershipAsync( string secret, string identity ) {
            this.GetMDTDetailedComputerRoleMembershipAsync( secret, identity, null );
        }

        /// <remarks/>
        public void GetMDTDetailedComputerRoleMembershipAsync( string secret, string identity, object userState ) {
            if( ( this.GetMDTDetailedComputerRoleMembershipOperationCompleted == null ) ) {
                this.GetMDTDetailedComputerRoleMembershipOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTDetailedComputerRoleMembershipOperationCompleted );
            }
            this.InvokeAsync( "GetMDTDetailedComputerRoleMembership", new object[] {
                    secret,
                    identity}, this.GetMDTDetailedComputerRoleMembershipOperationCompleted, userState );
        }

        private void OnGetMDTDetailedComputerRoleMembershipOperationCompleted( object arg ) {
            if( ( this.GetMDTDetailedComputerRoleMembershipCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTDetailedComputerRoleMembershipCompleted( this, new GetMDTDetailedComputerRoleMembershipCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerRoleMembership", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] GetMDTComputerRoleMembership( string secret, string id ) {
            object[] results = this.Invoke( "GetMDTComputerRoleMembership", new object[] {
                    secret,
                    id} );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerRoleMembership( string secret, string id, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerRoleMembership", new object[] {
                    secret,
                    id}, callback, asyncState );
        }

        /// <remarks/>
        public string[] EndGetMDTComputerRoleMembership( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string[])( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerRoleMembershipAsync( string secret, string id ) {
            this.GetMDTComputerRoleMembershipAsync( secret, id, null );
        }

        /// <remarks/>
        public void GetMDTComputerRoleMembershipAsync( string secret, string id, object userState ) {
            if( ( this.GetMDTComputerRoleMembershipOperationCompleted == null ) ) {
                this.GetMDTComputerRoleMembershipOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerRoleMembershipOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerRoleMembership", new object[] {
                    secret,
                    id}, this.GetMDTComputerRoleMembershipOperationCompleted, userState );
        }

        private void OnGetMDTComputerRoleMembershipOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerRoleMembershipCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerRoleMembershipCompleted( this, new GetMDTComputerRoleMembershipCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerNameByIdentity", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string GetMDTComputerNameByIdentity( string secret, string identity ) {
            object[] results = this.Invoke( "GetMDTComputerNameByIdentity", new object[] {
                    secret,
                    identity} );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerNameByIdentity( string secret, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerNameByIdentity", new object[] {
                    secret,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public string EndGetMDTComputerNameByIdentity( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (string)( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerNameByIdentityAsync( string secret, string identity ) {
            this.GetMDTComputerNameByIdentityAsync( secret, identity, null );
        }

        /// <remarks/>
        public void GetMDTComputerNameByIdentityAsync( string secret, string identity, object userState ) {
            if( ( this.GetMDTComputerNameByIdentityOperationCompleted == null ) ) {
                this.GetMDTComputerNameByIdentityOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerNameByIdentityOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerNameByIdentity", new object[] {
                    secret,
                    identity}, this.GetMDTComputerNameByIdentityOperationCompleted, userState );
        }

        private void OnGetMDTComputerNameByIdentityOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerNameByIdentityCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerNameByIdentityCompleted( this, new GetMDTComputerNameByIdentityCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddMDTRoleMemberByAssetTag", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddMDTRoleMemberByAssetTag( string secret, string roleName, string computerName, string assetTag, bool createComputer, string identity ) {
            object[] results = this.Invoke( "AddMDTRoleMemberByAssetTag", new object[] {
                    secret,
                    roleName,
                    computerName,
                    assetTag,
                    createComputer,
                    identity} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMDTRoleMemberByAssetTag( string secret, string roleName, string computerName, string assetTag, bool createComputer, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddMDTRoleMemberByAssetTag", new object[] {
                    secret,
                    roleName,
                    computerName,
                    assetTag,
                    createComputer,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddMDTRoleMemberByAssetTag( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByAssetTagAsync( string secret, string roleName, string computerName, string assetTag, bool createComputer, string identity ) {
            this.AddMDTRoleMemberByAssetTagAsync( secret, roleName, computerName, assetTag, createComputer, identity, null );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByAssetTagAsync( string secret, string roleName, string computerName, string assetTag, bool createComputer, string identity, object userState ) {
            if( ( this.AddMDTRoleMemberByAssetTagOperationCompleted == null ) ) {
                this.AddMDTRoleMemberByAssetTagOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddMDTRoleMemberByAssetTagOperationCompleted );
            }
            this.InvokeAsync( "AddMDTRoleMemberByAssetTag", new object[] {
                    secret,
                    roleName,
                    computerName,
                    assetTag,
                    createComputer,
                    identity}, this.AddMDTRoleMemberByAssetTagOperationCompleted, userState );
        }

        private void OnAddMDTRoleMemberByAssetTagOperationCompleted( object arg ) {
            if( ( this.AddMDTRoleMemberByAssetTagCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddMDTRoleMemberByAssetTagCompleted( this, new AddMDTRoleMemberByAssetTagCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddMDTRoleMemberBySerialNumber", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddMDTRoleMemberBySerialNumber( string secret, string roleName, string computerName, string serialNumber, bool createComputer, string identity ) {
            object[] results = this.Invoke( "AddMDTRoleMemberBySerialNumber", new object[] {
                    secret,
                    roleName,
                    computerName,
                    serialNumber,
                    createComputer,
                    identity} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMDTRoleMemberBySerialNumber( string secret, string roleName, string computerName, string serialNumber, bool createComputer, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddMDTRoleMemberBySerialNumber", new object[] {
                    secret,
                    roleName,
                    computerName,
                    serialNumber,
                    createComputer,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddMDTRoleMemberBySerialNumber( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddMDTRoleMemberBySerialNumberAsync( string secret, string roleName, string computerName, string serialNumber, bool createComputer, string identity ) {
            this.AddMDTRoleMemberBySerialNumberAsync( secret, roleName, computerName, serialNumber, createComputer, identity, null );
        }

        /// <remarks/>
        public void AddMDTRoleMemberBySerialNumberAsync( string secret, string roleName, string computerName, string serialNumber, bool createComputer, string identity, object userState ) {
            if( ( this.AddMDTRoleMemberBySerialNumberOperationCompleted == null ) ) {
                this.AddMDTRoleMemberBySerialNumberOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddMDTRoleMemberBySerialNumberOperationCompleted );
            }
            this.InvokeAsync( "AddMDTRoleMemberBySerialNumber", new object[] {
                    secret,
                    roleName,
                    computerName,
                    serialNumber,
                    createComputer,
                    identity}, this.AddMDTRoleMemberBySerialNumberOperationCompleted, userState );
        }

        private void OnAddMDTRoleMemberBySerialNumberOperationCompleted( object arg ) {
            if( ( this.AddMDTRoleMemberBySerialNumberCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddMDTRoleMemberBySerialNumberCompleted( this, new AddMDTRoleMemberBySerialNumberCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddMDTRoleMemberByMacAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddMDTRoleMemberByMacAddress( string secret, string roleName, string computerName, string macAddress, bool createComputer, string identity ) {
            object[] results = this.Invoke( "AddMDTRoleMemberByMacAddress", new object[] {
                    secret,
                    roleName,
                    computerName,
                    macAddress,
                    createComputer,
                    identity} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMDTRoleMemberByMacAddress( string secret, string roleName, string computerName, string macAddress, bool createComputer, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddMDTRoleMemberByMacAddress", new object[] {
                    secret,
                    roleName,
                    computerName,
                    macAddress,
                    createComputer,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddMDTRoleMemberByMacAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByMacAddressAsync( string secret, string roleName, string computerName, string macAddress, bool createComputer, string identity ) {
            this.AddMDTRoleMemberByMacAddressAsync( secret, roleName, computerName, macAddress, createComputer, identity, null );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByMacAddressAsync( string secret, string roleName, string computerName, string macAddress, bool createComputer, string identity, object userState ) {
            if( ( this.AddMDTRoleMemberByMacAddressOperationCompleted == null ) ) {
                this.AddMDTRoleMemberByMacAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddMDTRoleMemberByMacAddressOperationCompleted );
            }
            this.InvokeAsync( "AddMDTRoleMemberByMacAddress", new object[] {
                    secret,
                    roleName,
                    computerName,
                    macAddress,
                    createComputer,
                    identity}, this.AddMDTRoleMemberByMacAddressOperationCompleted, userState );
        }

        private void OnAddMDTRoleMemberByMacAddressOperationCompleted( object arg ) {
            if( ( this.AddMDTRoleMemberByMacAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddMDTRoleMemberByMacAddressCompleted( this, new AddMDTRoleMemberByMacAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddMDTRoleMemberByUUID", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddMDTRoleMemberByUUID( string secret, string roleName, string computerName, string uuid, bool createComputer, string identity ) {
            object[] results = this.Invoke( "AddMDTRoleMemberByUUID", new object[] {
                    secret,
                    roleName,
                    computerName,
                    uuid,
                    createComputer,
                    identity} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMDTRoleMemberByUUID( string secret, string roleName, string computerName, string uuid, bool createComputer, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddMDTRoleMemberByUUID", new object[] {
                    secret,
                    roleName,
                    computerName,
                    uuid,
                    createComputer,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddMDTRoleMemberByUUID( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByUUIDAsync( string secret, string roleName, string computerName, string uuid, bool createComputer, string identity ) {
            this.AddMDTRoleMemberByUUIDAsync( secret, roleName, computerName, uuid, createComputer, identity, null );
        }

        /// <remarks/>
        public void AddMDTRoleMemberByUUIDAsync( string secret, string roleName, string computerName, string uuid, bool createComputer, string identity, object userState ) {
            if( ( this.AddMDTRoleMemberByUUIDOperationCompleted == null ) ) {
                this.AddMDTRoleMemberByUUIDOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddMDTRoleMemberByUUIDOperationCompleted );
            }
            this.InvokeAsync( "AddMDTRoleMemberByUUID", new object[] {
                    secret,
                    roleName,
                    computerName,
                    uuid,
                    createComputer,
                    identity}, this.AddMDTRoleMemberByUUIDOperationCompleted, userState );
        }

        private void OnAddMDTRoleMemberByUUIDOperationCompleted( object arg ) {
            if( ( this.AddMDTRoleMemberByUUIDCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddMDTRoleMemberByUUIDCompleted( this, new AddMDTRoleMemberByUUIDCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/AddMDTRoleMember", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool AddMDTRoleMember( string secret, string computerName, string role, string assetTag, string serialNumber, string macAddress, string uuid, string description ) {
            object[] results = this.Invoke( "AddMDTRoleMember", new object[] {
                    secret,
                    computerName,
                    role,
                    assetTag,
                    serialNumber,
                    macAddress,
                    uuid,
                    description} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddMDTRoleMember( string secret, string computerName, string role, string assetTag, string serialNumber, string macAddress, string uuid, string description, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "AddMDTRoleMember", new object[] {
                    secret,
                    computerName,
                    role,
                    assetTag,
                    serialNumber,
                    macAddress,
                    uuid,
                    description}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndAddMDTRoleMember( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void AddMDTRoleMemberAsync( string secret, string computerName, string role, string assetTag, string serialNumber, string macAddress, string uuid, string description ) {
            this.AddMDTRoleMemberAsync( secret, computerName, role, assetTag, serialNumber, macAddress, uuid, description, null );
        }

        /// <remarks/>
        public void AddMDTRoleMemberAsync( string secret, string computerName, string role, string assetTag, string serialNumber, string macAddress, string uuid, string description, object userState ) {
            if( ( this.AddMDTRoleMemberOperationCompleted == null ) ) {
                this.AddMDTRoleMemberOperationCompleted = new System.Threading.SendOrPostCallback( this.OnAddMDTRoleMemberOperationCompleted );
            }
            this.InvokeAsync( "AddMDTRoleMember", new object[] {
                    secret,
                    computerName,
                    role,
                    assetTag,
                    serialNumber,
                    macAddress,
                    uuid,
                    description}, this.AddMDTRoleMemberOperationCompleted, userState );
        }

        private void OnAddMDTRoleMemberOperationCompleted( object arg ) {
            if( ( this.AddMDTRoleMemberCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.AddMDTRoleMemberCompleted( this, new AddMDTRoleMemberCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveMDTComputerFromRoles", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveMDTComputerFromRoles( string secret, string identity ) {
            object[] results = this.Invoke( "RemoveMDTComputerFromRoles", new object[] {
                    secret,
                    identity} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveMDTComputerFromRoles( string secret, string identity, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveMDTComputerFromRoles", new object[] {
                    secret,
                    identity}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveMDTComputerFromRoles( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveMDTComputerFromRolesAsync( string secret, string identity ) {
            this.RemoveMDTComputerFromRolesAsync( secret, identity, null );
        }

        /// <remarks/>
        public void RemoveMDTComputerFromRolesAsync( string secret, string identity, object userState ) {
            if( ( this.RemoveMDTComputerFromRolesOperationCompleted == null ) ) {
                this.RemoveMDTComputerFromRolesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveMDTComputerFromRolesOperationCompleted );
            }
            this.InvokeAsync( "RemoveMDTComputerFromRoles", new object[] {
                    secret,
                    identity}, this.RemoveMDTComputerFromRolesOperationCompleted, userState );
        }

        private void OnRemoveMDTComputerFromRolesOperationCompleted( object arg ) {
            if( ( this.RemoveMDTComputerFromRolesCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveMDTComputerFromRolesCompleted( this, new RemoveMDTComputerFromRolesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveMDTComputerByMacAddress", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveMDTComputerByMacAddress( string secret, string macAddress ) {
            object[] results = this.Invoke( "RemoveMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveMDTComputerByMacAddress( string secret, string macAddress, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveMDTComputerByMacAddress( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveMDTComputerByMacAddressAsync( string secret, string macAddress ) {
            this.RemoveMDTComputerByMacAddressAsync( secret, macAddress, null );
        }

        /// <remarks/>
        public void RemoveMDTComputerByMacAddressAsync( string secret, string macAddress, object userState ) {
            if( ( this.RemoveMDTComputerByMacAddressOperationCompleted == null ) ) {
                this.RemoveMDTComputerByMacAddressOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveMDTComputerByMacAddressOperationCompleted );
            }
            this.InvokeAsync( "RemoveMDTComputerByMacAddress", new object[] {
                    secret,
                    macAddress}, this.RemoveMDTComputerByMacAddressOperationCompleted, userState );
        }

        private void OnRemoveMDTComputerByMacAddressOperationCompleted( object arg ) {
            if( ( this.RemoveMDTComputerByMacAddressCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveMDTComputerByMacAddressCompleted( this, new RemoveMDTComputerByMacAddressCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/RemoveMDTComputerBySerialNumber", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool RemoveMDTComputerBySerialNumber( string secret, string serialNumber ) {
            object[] results = this.Invoke( "RemoveMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber} );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginRemoveMDTComputerBySerialNumber( string secret, string serialNumber, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "RemoveMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber}, callback, asyncState );
        }

        /// <remarks/>
        public bool EndRemoveMDTComputerBySerialNumber( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (bool)( results[0] ) );
        }

        /// <remarks/>
        public void RemoveMDTComputerBySerialNumberAsync( string secret, string serialNumber ) {
            this.RemoveMDTComputerBySerialNumberAsync( secret, serialNumber, null );
        }

        /// <remarks/>
        public void RemoveMDTComputerBySerialNumberAsync( string secret, string serialNumber, object userState ) {
            if( ( this.RemoveMDTComputerBySerialNumberOperationCompleted == null ) ) {
                this.RemoveMDTComputerBySerialNumberOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveMDTComputerBySerialNumberOperationCompleted );
            }
            this.InvokeAsync( "RemoveMDTComputerBySerialNumber", new object[] {
                    secret,
                    serialNumber}, this.RemoveMDTComputerBySerialNumberOperationCompleted, userState );
        }

        private void OnRemoveMDTComputerBySerialNumberOperationCompleted( object arg ) {
            if( ( this.RemoveMDTComputerBySerialNumberCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveMDTComputerBySerialNumberCompleted( this, new RemoveMDTComputerBySerialNumberCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://www.scconfigmgr.com/GetMDTComputerByName", RequestNamespace = "http://www.scconfigmgr.com", ResponseNamespace = "http://www.scconfigmgr.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public MDTComputer[] GetMDTComputerByName( string secret, string computerName ) {
            object[] results = this.Invoke( "GetMDTComputerByName", new object[] {
                    secret,
                    computerName} );
            return ( (MDTComputer[])( results[0] ) );
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetMDTComputerByName( string secret, string computerName, System.AsyncCallback callback, object asyncState ) {
            return this.BeginInvoke( "GetMDTComputerByName", new object[] {
                    secret,
                    computerName}, callback, asyncState );
        }

        /// <remarks/>
        public MDTComputer[] EndGetMDTComputerByName( System.IAsyncResult asyncResult ) {
            object[] results = this.EndInvoke( asyncResult );
            return ( (MDTComputer[])( results[0] ) );
        }

        /// <remarks/>
        public void GetMDTComputerByNameAsync( string secret, string computerName ) {
            this.GetMDTComputerByNameAsync( secret, computerName, null );
        }

        /// <remarks/>
        public void GetMDTComputerByNameAsync( string secret, string computerName, object userState ) {
            if( ( this.GetMDTComputerByNameOperationCompleted == null ) ) {
                this.GetMDTComputerByNameOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetMDTComputerByNameOperationCompleted );
            }
            this.InvokeAsync( "GetMDTComputerByName", new object[] {
                    secret,
                    computerName}, this.GetMDTComputerByNameOperationCompleted, userState );
        }

        private void OnGetMDTComputerByNameOperationCompleted( object arg ) {
            if( ( this.GetMDTComputerByNameCompleted != null ) ) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetMDTComputerByNameCompleted( this, new GetMDTComputerByNameCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        public new void CancelAsync( object userState ) {
            base.CancelAsync( userState );
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMUserDeviceRelation {

        private string uniqueUserNameField;

        private string fullUserNameField;

        private string resourceIdField;

        private string resourceNameField;

        private System.DateTime creationTimeField;

        /// <remarks/>
        public string UniqueUserName {
            get {
                return this.uniqueUserNameField;
            }
            set {
                this.uniqueUserNameField = value;
            }
        }

        /// <remarks/>
        public string FullUserName {
            get {
                return this.fullUserNameField;
            }
            set {
                this.fullUserNameField = value;
            }
        }

        /// <remarks/>
        public string ResourceId {
            get {
                return this.resourceIdField;
            }
            set {
                this.resourceIdField = value;
            }
        }

        /// <remarks/>
        public string ResourceName {
            get {
                return this.resourceNameField;
            }
            set {
                this.resourceNameField = value;
            }
        }

        /// <remarks/>
        public System.DateTime CreationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class MDTComputer {

        private string computerNameField;

        private string computerIdentityField;

        private string assetTagField;

        private string serialNumberField;

        private string uUIDField;

        private string macAddressField;

        /// <remarks/>
        public string ComputerName {
            get {
                return this.computerNameField;
            }
            set {
                this.computerNameField = value;
            }
        }

        /// <remarks/>
        public string ComputerIdentity {
            get {
                return this.computerIdentityField;
            }
            set {
                this.computerIdentityField = value;
            }
        }

        /// <remarks/>
        public string AssetTag {
            get {
                return this.assetTagField;
            }
            set {
                this.assetTagField = value;
            }
        }

        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }

        /// <remarks/>
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }

        /// <remarks/>
        public string MacAddress {
            get {
                return this.macAddressField;
            }
            set {
                this.macAddressField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class MDTRole {

        private string roleNameField;

        private string roleIdField;

        /// <remarks/>
        public string RoleName {
            get {
                return this.roleNameField;
            }
            set {
                this.roleNameField = value;
            }
        }

        /// <remarks/>
        public string RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class ADOrganizationalUnit {

        private string nameField;

        private string distinguishedNameField;

        private bool hasChildrenField;

        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string DistinguishedName {
            get {
                return this.distinguishedNameField;
            }
            set {
                this.distinguishedNameField = value;
            }
        }

        /// <remarks/>
        public bool HasChildren {
            get {
                return this.hasChildrenField;
            }
            set {
                this.hasChildrenField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class ADDomain {

        private string domainNameField;

        private string defaultNamingContextField;

        /// <remarks/>
        public string DomainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }

        /// <remarks/>
        public string DefaultNamingContext {
            get {
                return this.defaultNamingContextField;
            }
            set {
                this.defaultNamingContextField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class ADComputer {

        private string samAccountNameField;

        private string canonicalNameField;

        private string dnsHostNameField;

        private string distinguishedNameField;

        /// <remarks/>
        public string SamAccountName {
            get {
                return this.samAccountNameField;
            }
            set {
                this.samAccountNameField = value;
            }
        }

        /// <remarks/>
        public string CanonicalName {
            get {
                return this.canonicalNameField;
            }
            set {
                this.canonicalNameField = value;
            }
        }

        /// <remarks/>
        public string DnsHostName {
            get {
                return this.dnsHostNameField;
            }
            set {
                this.dnsHostNameField = value;
            }
        }

        /// <remarks/>
        public string DistinguishedName {
            get {
                return this.distinguishedNameField;
            }
            set {
                this.distinguishedNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class ADGroup {

        private string samAccountNameField;

        private string distinguishedNameField;

        /// <remarks/>
        public string samAccountName {
            get {
                return this.samAccountNameField;
            }
            set {
                this.samAccountNameField = value;
            }
        }

        /// <remarks/>
        public string DistinguishedName {
            get {
                return this.distinguishedNameField;
            }
            set {
                this.distinguishedNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMOSImage {

        private string packageIDField;

        private string architectureField;

        private string versionField;

        /// <remarks/>
        public string PackageID {
            get {
                return this.packageIDField;
            }
            set {
                this.packageIDField = value;
            }
        }

        /// <remarks/>
        public string Architecture {
            get {
                return this.architectureField;
            }
            set {
                this.architectureField = value;
            }
        }

        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMPackage {

        private string packageNameField;

        private string packageIDField;

        private string packageDescriptionField;

        private string packageManufacturerField;

        private string packageLanguageField;

        private string packageVersionField;

        private System.DateTime packageCreatedField;

        /// <remarks/>
        public string PackageName {
            get {
                return this.packageNameField;
            }
            set {
                this.packageNameField = value;
            }
        }

        /// <remarks/>
        public string PackageID {
            get {
                return this.packageIDField;
            }
            set {
                this.packageIDField = value;
            }
        }

        /// <remarks/>
        public string PackageDescription {
            get {
                return this.packageDescriptionField;
            }
            set {
                this.packageDescriptionField = value;
            }
        }

        /// <remarks/>
        public string PackageManufacturer {
            get {
                return this.packageManufacturerField;
            }
            set {
                this.packageManufacturerField = value;
            }
        }

        /// <remarks/>
        public string PackageLanguage {
            get {
                return this.packageLanguageField;
            }
            set {
                this.packageLanguageField = value;
            }
        }

        /// <remarks/>
        public string PackageVersion {
            get {
                return this.packageVersionField;
            }
            set {
                this.packageVersionField = value;
            }
        }

        /// <remarks/>
        public System.DateTime PackageCreated {
            get {
                return this.packageCreatedField;
            }
            set {
                this.packageCreatedField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMDriverPackage {

        private string packageNameField;

        private string packageIDField;

        /// <remarks/>
        public string PackageName {
            get {
                return this.packageNameField;
            }
            set {
                this.packageNameField = value;
            }
        }

        /// <remarks/>
        public string PackageID {
            get {
                return this.packageIDField;
            }
            set {
                this.packageIDField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMCollection {

        private string nameField;

        private string collectionIDField;

        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string CollectionID {
            get {
                return this.collectionIDField;
            }
            set {
                this.collectionIDField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMUser {

        private string uniqueUserNameField;

        private string resourceIdField;

        private string windowsNTDomainField;

        private string fullDomainNameField;

        private string fullUserNameField;

        private string userPrincipalNameField;

        private string nameField;

        private string distinguishedNameField;

        /// <remarks/>
        public string UniqueUserName {
            get {
                return this.uniqueUserNameField;
            }
            set {
                this.uniqueUserNameField = value;
            }
        }

        /// <remarks/>
        public string ResourceId {
            get {
                return this.resourceIdField;
            }
            set {
                this.resourceIdField = value;
            }
        }

        /// <remarks/>
        public string WindowsNTDomain {
            get {
                return this.windowsNTDomainField;
            }
            set {
                this.windowsNTDomainField = value;
            }
        }

        /// <remarks/>
        public string FullDomainName {
            get {
                return this.fullDomainNameField;
            }
            set {
                this.fullDomainNameField = value;
            }
        }

        /// <remarks/>
        public string FullUserName {
            get {
                return this.fullUserNameField;
            }
            set {
                this.fullUserNameField = value;
            }
        }

        /// <remarks/>
        public string UserPrincipalName {
            get {
                return this.userPrincipalNameField;
            }
            set {
                this.userPrincipalNameField = value;
            }
        }

        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string DistinguishedName {
            get {
                return this.distinguishedNameField;
            }
            set {
                this.distinguishedNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMTaskSequence {

        private string packageNameField;

        private string packageIDField;

        private string advertisementIdField;

        private int advertFlagsField;

        private string descriptionField;

        private string bootImageIDField;

        /// <remarks/>
        public string PackageName {
            get {
                return this.packageNameField;
            }
            set {
                this.packageNameField = value;
            }
        }

        /// <remarks/>
        public string PackageID {
            get {
                return this.packageIDField;
            }
            set {
                this.packageIDField = value;
            }
        }

        /// <remarks/>
        public string AdvertisementId {
            get {
                return this.advertisementIdField;
            }
            set {
                this.advertisementIdField = value;
            }
        }

        /// <remarks/>
        public int AdvertFlags {
            get {
                return this.advertFlagsField;
            }
            set {
                this.advertFlagsField = value;
            }
        }

        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        public string BootImageID {
            get {
                return this.bootImageIDField;
            }
            set {
                this.bootImageIDField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://www.scconfigmgr.com" )]
    public partial class CMApplication {

        private string applicationNameField;

        private string applicationManufacturerField;

        private string applicationDescriptionField;

        private string applicationVersionField;

        private System.DateTime applicationCreatedField;

        private string applicationExecutionContextField;

        private string collectionNameField;

        /// <remarks/>
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }

        /// <remarks/>
        public string ApplicationManufacturer {
            get {
                return this.applicationManufacturerField;
            }
            set {
                this.applicationManufacturerField = value;
            }
        }

        /// <remarks/>
        public string ApplicationDescription {
            get {
                return this.applicationDescriptionField;
            }
            set {
                this.applicationDescriptionField = value;
            }
        }

        /// <remarks/>
        public string ApplicationVersion {
            get {
                return this.applicationVersionField;
            }
            set {
                this.applicationVersionField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ApplicationCreated {
            get {
                return this.applicationCreatedField;
            }
            set {
                this.applicationCreatedField = value;
            }
        }

        /// <remarks/>
        public string ApplicationExecutionContext {
            get {
                return this.applicationExecutionContextField;
            }
            set {
                this.applicationExecutionContextField = value;
            }
        }

        /// <remarks/>
        public string CollectionName {
            get {
                return this.collectionNameField;
            }
            set {
                this.collectionNameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCWVersionCompletedEventHandler( object sender, GetCWVersionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCWVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCWVersionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMPrimaryUserByDeviceNameCompletedEventHandler( object sender, GetCMPrimaryUserByDeviceNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMPrimaryUserByDeviceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMPrimaryUserByDeviceNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMPrimaryUserByDeviceResourceIdCompletedEventHandler( object sender, GetCMPrimaryUserByDeviceResourceIdCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMPrimaryUserByDeviceResourceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMPrimaryUserByDeviceResourceIdCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMUserDeviceRelation[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMUserDeviceRelation[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMPrimaryDeviceByUserCompletedEventHandler( object sender, GetCMPrimaryDeviceByUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMPrimaryDeviceByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMPrimaryDeviceByUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeployedApplicationsByUserCompletedEventHandler( object sender, GetCMDeployedApplicationsByUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeployedApplicationsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeployedApplicationsByUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMApplication[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeployedApplicationsByDeviceCompletedEventHandler( object sender, GetCMDeployedApplicationsByDeviceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeployedApplicationsByDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeployedApplicationsByDeviceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMHiddenTaskSequenceDeploymentsCompletedEventHandler( object sender, GetCMHiddenTaskSequenceDeploymentsCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMHiddenTaskSequenceDeploymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMHiddenTaskSequenceDeploymentsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMTaskSequence[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMTaskSequence[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeviceResourceIDByUUIDCompletedEventHandler( object sender, GetCMDeviceResourceIDByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeviceResourceIDByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeviceResourceIDByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeviceResourceIDByMACAddressCompletedEventHandler( object sender, GetCMDeviceResourceIDByMACAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeviceResourceIDByMACAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeviceResourceIDByMACAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMUnknownComputerResourceIDByUUIDCompletedEventHandler( object sender, GetCMUnknownComputerResourceIDByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMUnknownComputerResourceIDByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMUnknownComputerResourceIDByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeviceNameByUUIDCompletedEventHandler( object sender, GetCMDeviceNameByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeviceNameByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeviceNameByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeviceUUIDByNameCompletedEventHandler( object sender, GetCMDeviceUUIDByNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeviceUUIDByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeviceUUIDByNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventHandler( object sender, GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMHiddenTaskSequenceDeploymentsByResourceIdCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMTaskSequence[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMTaskSequence[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMBootImageSourceVersionCompletedEventHandler( object sender, GetCMBootImageSourceVersionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMBootImageSourceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMBootImageSourceVersionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDiscoveredUsersCompletedEventHandler( object sender, GetCMDiscoveredUsersCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDiscoveredUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDiscoveredUsersCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMUser[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMUniqueUserNameCompletedEventHandler( object sender, GetCMUniqueUserNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMUniqueUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMUniqueUserNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMUserCompletedEventHandler( object sender, GetCMUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMUser)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void ImportCMComputerByMacAddressCompletedEventHandler( object sender, ImportCMComputerByMacAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class ImportCMComputerByMacAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal ImportCMComputerByMacAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void ImportCMComputerByUUIDCompletedEventHandler( object sender, ImportCMComputerByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class ImportCMComputerByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal ImportCMComputerByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddCMComputerToCollectionCompletedEventHandler( object sender, AddCMComputerToCollectionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddCMComputerToCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddCMComputerToCollectionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDeviceCollectionsCompletedEventHandler( object sender, GetCMDeviceCollectionsCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDeviceCollectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDeviceCollectionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMCollection[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void UpdateCMCollectionMembershipCompletedEventHandler( object sender, UpdateCMCollectionMembershipCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class UpdateCMCollectionMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal UpdateCMCollectionMembershipCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMDriverPackageByModelCompletedEventHandler( object sender, GetCMDriverPackageByModelCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMDriverPackageByModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMDriverPackageByModelCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMDriverPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMDriverPackage[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMPackageCompletedEventHandler( object sender, GetCMPackageCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMPackageCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMPackage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMPackage[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMUnknownDeviceByUUIDCompletedEventHandler( object sender, GetCMUnknownDeviceByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMUnknownDeviceByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMUnknownDeviceByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMOSImageVersionForTaskSequenceCompletedEventHandler( object sender, GetCMOSImageVersionForTaskSequenceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMOSImageVersionForTaskSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMOSImageVersionForTaskSequenceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMOSImageArchitectureForTaskSequenceCompletedEventHandler( object sender, GetCMOSImageArchitectureForTaskSequenceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMOSImageArchitectureForTaskSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMOSImageArchitectureForTaskSequenceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMOSImageForTaskSequenceCompletedEventHandler( object sender, GetCMOSImageForTaskSequenceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMOSImageForTaskSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMOSImageForTaskSequenceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMOSImage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMOSImage[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMUnknownDeviceByUUIDCompletedEventHandler( object sender, RemoveCMUnknownDeviceByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMUnknownDeviceByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMUnknownDeviceByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMDeviceByUUIDCompletedEventHandler( object sender, RemoveCMDeviceByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMDeviceByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMDeviceByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMDeviceByNameCompletedEventHandler( object sender, RemoveCMDeviceByNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMDeviceByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMDeviceByNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMDeviceByResourceIDCompletedEventHandler( object sender, RemoveCMDeviceByResourceIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMDeviceByResourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMDeviceByResourceIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMDeviceFromCollectionCompletedEventHandler( object sender, RemoveCMDeviceFromCollectionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMDeviceFromCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMDeviceFromCollectionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMLastPXEAdvertisementForDeviceCompletedEventHandler( object sender, RemoveCMLastPXEAdvertisementForDeviceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMLastPXEAdvertisementForDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMLastPXEAdvertisementForDeviceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMLastPXEAdvertisementForCollectionCompletedEventHandler( object sender, RemoveCMLastPXEAdvertisementForCollectionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMLastPXEAdvertisementForCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMLastPXEAdvertisementForCollectionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddCMComputerAssociationForUserCompletedEventHandler( object sender, AddCMComputerAssociationForUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddCMComputerAssociationForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddCMComputerAssociationForUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMComputerAssociationCompletedEventHandler( object sender, RemoveCMComputerAssociationCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMComputerAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMComputerAssociationCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMApplicationDeploymentsByCollectionIDCompletedEventHandler( object sender, GetCMApplicationDeploymentsByCollectionIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMApplicationDeploymentsByCollectionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMApplicationDeploymentsByCollectionIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMCollectionsForDeviceByUUIDCompletedEventHandler( object sender, GetCMCollectionsForDeviceByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMCollectionsForDeviceByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMCollectionsForDeviceByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMCollection[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMCollectionsForDeviceByNameCompletedEventHandler( object sender, GetCMCollectionsForDeviceByNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMCollectionsForDeviceByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMCollectionsForDeviceByNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMCollection[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMCollectionsForDeviceByResourceIDCompletedEventHandler( object sender, GetCMCollectionsForDeviceByResourceIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMCollectionsForDeviceByResourceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMCollectionsForDeviceByResourceIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMCollection[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMCollection[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMApplicationByCategoryCompletedEventHandler( object sender, GetCMApplicationByCategoryCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMApplicationByCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMApplicationByCategoryCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMApplication[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMApplicationCompletedEventHandler( object sender, GetCMApplicationCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMApplicationCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMApplication[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveCMPrimaryUserByDeviceResourceIdCompletedEventHandler( object sender, RemoveCMPrimaryUserByDeviceResourceIdCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveCMPrimaryUserByDeviceResourceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveCMPrimaryUserByDeviceResourceIdCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMFirstAvailableNameSequenceCompletedEventHandler( object sender, GetCMFirstAvailableNameSequenceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMFirstAvailableNameSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMFirstAvailableNameSequenceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetCMTaskSequenceCompletedEventHandler( object sender, GetCMTaskSequenceCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetCMTaskSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetCMTaskSequenceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public CMTaskSequence Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (CMTaskSequence)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void SetADOrganizationalUnitForComputerCompletedEventHandler( object sender, SetADOrganizationalUnitForComputerCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class SetADOrganizationalUnitForComputerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal SetADOrganizationalUnitForComputerCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void SetADComputerManagedByCompletedEventHandler( object sender, SetADComputerManagedByCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class SetADComputerManagedByCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal SetADComputerManagedByCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddADComputerToGroupCompletedEventHandler( object sender, AddADComputerToGroupCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddADComputerToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddADComputerToGroupCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveADComputerFromGroupCompletedEventHandler( object sender, RemoveADComputerFromGroupCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveADComputerFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveADComputerFromGroupCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADGroupMembersCompletedEventHandler( object sender, GetADGroupMembersCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADGroupMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADGroupMembersCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADGroupsByUserCompletedEventHandler( object sender, GetADGroupsByUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADGroupsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADGroupsByUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public ADGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (ADGroup[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void SetADComputerDescriptionCompletedEventHandler( object sender, SetADComputerDescriptionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class SetADComputerDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal SetADComputerDescriptionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADComputerDescriptionCompletedEventHandler( object sender, GetADComputerDescriptionCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADComputerDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADComputerDescriptionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADSiteNameByIPAddressCompletedEventHandler( object sender, GetADSiteNameByIPAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADSiteNameByIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADSiteNameByIPAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADGroupMemberByUserCompletedEventHandler( object sender, GetADGroupMemberByUserCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADGroupMemberByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADGroupMemberByUserCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADGroupMemberByComputerCompletedEventHandler( object sender, GetADGroupMemberByComputerCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADGroupMemberByComputerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADGroupMemberByComputerCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADComputerCompletedEventHandler( object sender, GetADComputerCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADComputerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADComputerCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public ADComputer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (ADComputer)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveADComputerCompletedEventHandler( object sender, RemoveADComputerCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveADComputerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveADComputerCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADDomainCompletedEventHandler( object sender, GetADDomainCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADDomainCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public ADDomain Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (ADDomain)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetADOrganizationalUnitsCompletedEventHandler( object sender, GetADOrganizationalUnitsCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetADOrganizationalUnitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetADOrganizationalUnitsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public ADOrganizationalUnit[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (ADOrganizationalUnit[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void NewCWEventLogEntryCompletedEventHandler( object sender, NewCWEventLogEntryCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class NewCWEventLogEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal NewCWEventLogEntryCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTRolesCompletedEventHandler( object sender, GetMDTRolesCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTRolesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerByAssetTagCompletedEventHandler( object sender, GetMDTComputerByAssetTagCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerByAssetTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerByAssetTagCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerByMacAddressCompletedEventHandler( object sender, GetMDTComputerByMacAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerByMacAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerByMacAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerBySerialNumberCompletedEventHandler( object sender, GetMDTComputerBySerialNumberCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerBySerialNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerBySerialNumberCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerByUUIDCompletedEventHandler( object sender, GetMDTComputerByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTDetailedComputerRoleMembershipCompletedEventHandler( object sender, GetMDTDetailedComputerRoleMembershipCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTDetailedComputerRoleMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTDetailedComputerRoleMembershipCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public MDTRole[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (MDTRole[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerRoleMembershipCompletedEventHandler( object sender, GetMDTComputerRoleMembershipCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerRoleMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerRoleMembershipCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerNameByIdentityCompletedEventHandler( object sender, GetMDTComputerNameByIdentityCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerNameByIdentityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerNameByIdentityCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddMDTRoleMemberByAssetTagCompletedEventHandler( object sender, AddMDTRoleMemberByAssetTagCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddMDTRoleMemberByAssetTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddMDTRoleMemberByAssetTagCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddMDTRoleMemberBySerialNumberCompletedEventHandler( object sender, AddMDTRoleMemberBySerialNumberCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddMDTRoleMemberBySerialNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddMDTRoleMemberBySerialNumberCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddMDTRoleMemberByMacAddressCompletedEventHandler( object sender, AddMDTRoleMemberByMacAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddMDTRoleMemberByMacAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddMDTRoleMemberByMacAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddMDTRoleMemberByUUIDCompletedEventHandler( object sender, AddMDTRoleMemberByUUIDCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddMDTRoleMemberByUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddMDTRoleMemberByUUIDCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void AddMDTRoleMemberCompletedEventHandler( object sender, AddMDTRoleMemberCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class AddMDTRoleMemberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal AddMDTRoleMemberCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveMDTComputerFromRolesCompletedEventHandler( object sender, RemoveMDTComputerFromRolesCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveMDTComputerFromRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveMDTComputerFromRolesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveMDTComputerByMacAddressCompletedEventHandler( object sender, RemoveMDTComputerByMacAddressCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveMDTComputerByMacAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveMDTComputerByMacAddressCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void RemoveMDTComputerBySerialNumberCompletedEventHandler( object sender, RemoveMDTComputerBySerialNumberCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class RemoveMDTComputerBySerialNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal RemoveMDTComputerBySerialNumberCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[0] ) );
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    public delegate void GetMDTComputerByNameCompletedEventHandler( object sender, GetMDTComputerByNameCompletedEventArgs e );

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute( "wsdl", "4.6.1055.0" )]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    public partial class GetMDTComputerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

        private object[] results;

        internal GetMDTComputerByNameCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState ) :
                base( exception, cancelled, userState ) {
            this.results = results;
        }

        /// <remarks/>
        public MDTComputer[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ( (MDTComputer[])( this.results[0] ) );
            }
        }
    }
}